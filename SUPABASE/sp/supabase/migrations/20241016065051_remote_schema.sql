
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pg_cron" WITH SCHEMA "pg_catalog";

CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "http" WITH SCHEMA "public";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";
SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."camera_nvr_channels" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "nvr_uid" "text",
    "channel_id" integer,
    "name" "text",
    "model" "text",
    "camera_uid" "text",
    "image" "text"
);

CREATE TABLE IF NOT EXISTS "public"."GDPR" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "gdpr" "text"
);
ALTER TABLE "public"."GDPR" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."GDPR_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."location_activities" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "location_id" bigint,
    "user_id" "uuid",
    "snooze_status" smallint,
    "current_time" time without time zone,
    "end_time" time without time zone,
    "active" boolean,
    "location_name" "text",
    "end_timestamp" timestamp with time zone,
    "duration" bigint DEFAULT '0'::bigint,
    "stopped_timestamp" timestamp with time zone
);
ALTER TABLE "public"."location_activities" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."activty_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."camera_models" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "model" "text",
    "mobile_data" boolean,
    "battery" boolean,
    "solar" boolean,
    "wifi" boolean,
    "poe" boolean,
    "ptz" boolean,
    "pir" boolean,
    "person_detection" boolean,
    "vehicle_detection" boolean,
    "motion_detection" boolean,
    "image" "text",
    "four_k" boolean
);
CREATE TABLE IF NOT EXISTS "public"."cameras" (
    "id" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text",
    "model" "text",
    "sim_card_id" bigint,
    "image" "text",
    "coordinates" "text",
    "is_nvr" boolean DEFAULT false NOT NULL,
    "edited_at" timestamp with time zone
);
CREATE TABLE IF NOT EXISTS "public"."cameras_in_toml" (
    "id" "text" NOT NULL,
    "is_in_toml" boolean
);
CREATE TABLE IF NOT EXISTS "public"."sim_card_provider" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "logo" "text"
);
CREATE TABLE IF NOT EXISTS "public"."sim_cards" (
    "id" bigint NOT NULL,
    "iccid" "text",
    "imei" "text",
    "provider" "text"
);
CREATE OR REPLACE VIEW "public"."cameras_view" WITH ("security_invoker"='true') AS
 SELECT "c"."id",
    "c"."created_at",
    "c"."name",
    "c"."model",
    "c"."sim_card_id",
    "c"."image",
    "c"."coordinates",
    "c"."is_nvr",
    "c"."edited_at",
    "cm"."mobile_data",
    "cm"."battery",
    "cm"."solar",
    "cm"."wifi",
    "cm"."poe",
    "cm"."ptz",
    "cm"."pir",
    "cm"."person_detection",
    "cm"."vehicle_detection",
    "cm"."motion_detection",
    "cm"."image" AS "model_image",
    "sc"."iccid",
    "sc"."imei",
    "sc"."provider",
    "cit"."is_in_toml" AS "active",
    "scp"."logo"
   FROM (((("public"."cameras" "c"
     LEFT JOIN "public"."camera_models" "cm" ON (("cm"."model" = "c"."model")))
     LEFT JOIN "public"."sim_cards" "sc" ON (("c"."sim_card_id" = "sc"."id")))
     LEFT JOIN "public"."sim_card_provider" "scp" ON (("scp"."name" = "sc"."provider")))
     LEFT JOIN "public"."cameras_in_toml" "cit" ON (("cit"."id" = "c"."id")));
CREATE TABLE IF NOT EXISTS "public"."location_to_camera" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "location_id" bigint,
    "camera_id" "text"
);
CREATE TABLE IF NOT EXISTS "public"."locations" (
    "id" bigint NOT NULL,
    "name" character varying(50) NOT NULL,
    "image" "text",
    "warranty" boolean DEFAULT false,
    "intervention" boolean DEFAULT false,
    "monitoring" boolean DEFAULT false,
    "solar" boolean DEFAULT false,
    "mobile_internet" boolean DEFAULT false,
    "installer" "text",
    "coordinates" "text" DEFAULT '0, 0'::"text",
    "maintenence" "text",
    "address" "text",
    "company_id" bigint
);
CREATE OR REPLACE VIEW "public"."ai_location_camera_names_view" WITH ("security_invoker"='false') AS
 SELECT "l"."name" AS "location_name",
    "c"."name" AS "camera_name"
   FROM (("public"."location_to_camera" "ltc"
     JOIN "public"."cameras_view" "c" ON (("c"."id" = "ltc"."camera_id")))
     JOIN "public"."locations" "l" ON (("l"."id" = "ltc"."location_id")));
CREATE TABLE IF NOT EXISTS "public"."emails_alerted" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "camera_name" "text",
    "from_address" "text",
    "to_address" "text",
    "subject" "text",
    "finished_time" "text",
    "body" "text",
    "snapshot_path" "text",
    "motion_type" "text",
    "read_state" "text" DEFAULT 'false'::"text",
    "opened_by" "uuid",
    "attachment_type" "text",
    "opened_at" time without time zone,
    "monitoring_shift" smallint,
    "email_time" timestamp with time zone,
    "snooze_id" bigint,
    "location_id" bigint,
    "alert" boolean DEFAULT true,
    "alert_cancelled" boolean DEFAULT false,
    "description" "text",
    "alerted_by" "uuid"
);
CREATE OR REPLACE VIEW "public"."alerted_emails_by_monitor_view" WITH ("security_invoker"='true') AS
 WITH "report_date" AS (
         SELECT "now"() AS "today",
            ("now"() - '1 day'::interval) AS "yesterday"
        )
 SELECT "e"."id",
    "e"."created_at",
    "e"."camera_name",
    "e"."from_address",
    "e"."to_address",
    "e"."subject",
    "e"."finished_time",
    "e"."body",
    "e"."snapshot_path",
    "e"."motion_type",
    "e"."read_state",
    "e"."opened_by",
    "e"."attachment_type",
    "e"."opened_at",
    "e"."monitoring_shift",
    "e"."email_time",
    "e"."snooze_id",
    "e"."location_id",
    "e"."alert",
    "e"."alert_cancelled",
    "e"."description",
    "e"."alerted_by"
   FROM ("public"."emails_alerted" "e"
     CROSS JOIN "report_date" "rd")
  WHERE (("e"."opened_by" = "auth"."uid"()) AND (("e"."email_time" >= "rd"."yesterday") AND ("e"."email_time" <= "rd"."today")));
CREATE TABLE IF NOT EXISTS "public"."analysis" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "analyse_directory" "text" NOT NULL,
    "generated_video_status" boolean DEFAULT false,
    "shared_users" "uuid"[],
    "start_analysis" boolean DEFAULT false,
    "zone" "text"
);
ALTER TABLE "public"."analysis" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."analysis_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."call_history" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "caller_id" "uuid",
    "phone" "text",
    "receiver_id" "uuid"
);
ALTER TABLE "public"."call_history" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."call_history_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."camera_checks" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "camera_name" "text",
    "camera_uid" "text",
    "date" "text",
    "time" "text",
    "channel_id" "text",
    "charge_status" "text",
    "adapter_status" "text",
    "voltage" "text",
    "current" "text",
    "temperature" "text",
    "battery_percent" integer,
    "low_power" "text",
    "battery_version" "text",
    "pir_status" "text",
    "cam_index" bigint,
    "camera_status" "text",
    "snapshot_path" "text",
    "last_check_uid" "text",
    "verification_status" "text",
    "opened_by_uuid" "text",
    "opened_time" "text",
    "location_id" bigint,
    "rotation_info" "text",
    "rotation_description" "text"
);
ALTER TABLE "public"."camera_checks" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."camera_checks_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."users" (
    "id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "username" "text",
    "email" "text",
    "phone" "text",
    "onesignal_subscription_id" "text",
    "profile_image" "text",
    "company_key_name" "text",
    "subscribed" boolean DEFAULT true,
    "is_intervention" boolean DEFAULT false
);
CREATE OR REPLACE VIEW "public"."camera_checks_view" WITH ("security_invoker"='true') AS
 SELECT "cc"."id",
    "cc"."created_at",
    "cc"."camera_name",
    "cc"."camera_uid",
    "cc"."date",
    "cc"."time",
    "cc"."channel_id",
    "cc"."charge_status",
    "cc"."adapter_status",
    "cc"."voltage",
    "cc"."current",
    "cc"."temperature",
    "cc"."battery_percent",
    "cc"."low_power",
    "cc"."battery_version",
    "cc"."pir_status",
    "cc"."cam_index",
    "cc"."camera_status",
    "cc"."snapshot_path",
    "cc"."last_check_uid",
    "cc"."verification_status",
    "cc"."opened_by_uuid",
    "cc"."opened_time",
    "u"."username" AS "opened_by_username",
    "u"."email" AS "opened_by_email"
   FROM ("public"."camera_checks" "cc"
     LEFT JOIN "public"."users" "u" ON ((("u"."id")::"text" = "cc"."opened_by_uuid")));
ALTER TABLE "public"."camera_models" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."camera_models_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."camera_models_view" WITH ("security_invoker"='true') AS
 SELECT "cm"."id",
    "cm"."created_at",
    "cm"."model",
    "cm"."mobile_data",
    "cm"."battery",
    "cm"."solar",
    "cm"."wifi",
    "cm"."poe",
    "cm"."ptz",
    "cm"."pir",
    "cm"."person_detection",
    "cm"."vehicle_detection",
    "cm"."motion_detection",
    "cm"."image",
    "cm"."four_k"
   FROM "public"."camera_models" "cm";
ALTER TABLE "public"."camera_nvr_channels" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."camera_nvr_channels_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."camera_placement_images" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "camera_id" "text" NOT NULL,
    "image" "text"
);
CREATE TABLE IF NOT EXISTS "public"."camera_script_start_times_automated" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "date" "text",
    "time" "text",
    "generated_uid" "text",
    "period" bigint,
    "automatic" boolean,
    "read_state" "text" DEFAULT 'false'::"text",
    "date_time" timestamp without time zone NOT NULL,
    "progress" smallint
);
CREATE TABLE IF NOT EXISTS "public"."camera_script_start_times_manual" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "date" "text",
    "time" "text",
    "generated_uid" "text",
    "period" bigint,
    "automatic" boolean,
    "read_state" "text" DEFAULT 'false'::"text",
    "date_time" timestamp without time zone,
    "progress" smallint,
    "user_id" "uuid"
);
COMMENT ON TABLE "public"."camera_script_start_times_manual" IS 'This is a duplicate of camera_script_start_times';

CREATE TABLE IF NOT EXISTS "public"."camera_script_start_times_manual_client" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "date" "text",
    "time" "text",
    "generated_uid" "text",
    "period" bigint,
    "automatic" boolean,
    "read_state" "text" DEFAULT 'false'::"text",
    "date_time" timestamp without time zone,
    "progress" smallint,
    "user_id" "uuid"
);
COMMENT ON TABLE "public"."camera_script_start_times_manual_client" IS 'This is a duplicate of camera_script_start_times_manual';

ALTER TABLE "public"."camera_script_start_times_manual_client" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."camera_script_start_times_manual_client_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE "public"."camera_script_start_times_manual" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."camera_script_start_times_manual_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user_to_camera" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "camera_id" "text" NOT NULL
);
CREATE TABLE IF NOT EXISTS "public"."user_to_company" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "company_id" bigint NOT NULL,
    "ord" bigint DEFAULT '0'::bigint NOT NULL
);
CREATE TABLE IF NOT EXISTS "public"."user_to_location" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "location_id" bigint NOT NULL,
    "temp_code" bigint
);
CREATE OR REPLACE VIEW "public"."user_cameras_view" WITH ("security_invoker"='true') AS
 SELECT "utc"."user_id",
    "c"."id",
    "c"."created_at",
    "c"."name",
    "c"."model",
    "c"."sim_card_id",
    "c"."image",
    "c"."coordinates",
    "c"."is_nvr",
    "c"."edited_at",
    "c"."mobile_data",
    "c"."battery",
    "c"."solar",
    "c"."wifi",
    "c"."poe",
    "c"."ptz",
    "c"."pir",
    "c"."person_detection",
    "c"."vehicle_detection",
    "c"."motion_detection",
    "c"."model_image",
    "c"."iccid",
    "c"."imei",
    "c"."provider",
    "c"."active",
    "c"."logo"
   FROM ("public"."user_to_camera" "utc"
     JOIN "public"."cameras_view" "c" ON (("utc"."camera_id" = "c"."id")))
UNION
 SELECT "utl"."user_id",
    "c"."id",
    "c"."created_at",
    "c"."name",
    "c"."model",
    "c"."sim_card_id",
    "c"."image",
    "c"."coordinates",
    "c"."is_nvr",
    "c"."edited_at",
    "c"."mobile_data",
    "c"."battery",
    "c"."solar",
    "c"."wifi",
    "c"."poe",
    "c"."ptz",
    "c"."pir",
    "c"."person_detection",
    "c"."vehicle_detection",
    "c"."motion_detection",
    "c"."model_image",
    "c"."iccid",
    "c"."imei",
    "c"."provider",
    "c"."active",
    "c"."logo"
   FROM (("public"."user_to_location" "utl"
     JOIN "public"."location_to_camera" "ltc" ON (("ltc"."location_id" = "utl"."location_id")))
     LEFT JOIN "public"."cameras_view" "c" ON (("ltc"."camera_id" = "c"."id")))
UNION
 SELECT "utc"."user_id",
    "c"."id",
    "c"."created_at",
    "c"."name",
    "c"."model",
    "c"."sim_card_id",
    "c"."image",
    "c"."coordinates",
    "c"."is_nvr",
    "c"."edited_at",
    "c"."mobile_data",
    "c"."battery",
    "c"."solar",
    "c"."wifi",
    "c"."poe",
    "c"."ptz",
    "c"."pir",
    "c"."person_detection",
    "c"."vehicle_detection",
    "c"."motion_detection",
    "c"."model_image",
    "c"."iccid",
    "c"."imei",
    "c"."provider",
    "c"."active",
    "c"."logo"
   FROM ((("public"."user_to_company" "utc"
     JOIN "public"."locations" "l" ON (("l"."company_id" = "utc"."company_id")))
     JOIN "public"."location_to_camera" "ltc" ON (("l"."id" = "ltc"."location_id")))
     LEFT JOIN "public"."cameras_view" "c" ON (("ltc"."camera_id" = "c"."id")))
  ORDER BY 4;
CREATE OR REPLACE VIEW "public"."camera_start_script_user_view" WITH ("security_invoker"='true') AS
 SELECT DISTINCT ON ("csstm"."generated_uid", "ucv"."user_id") "csstm"."generated_uid" AS "script_uid",
    "csstm"."read_state",
    "csstm"."period",
    "csstm"."date",
    "csstm"."time",
    "cc"."camera_uid",
    "ucv"."user_id"
   FROM (("public"."user_cameras_view" "ucv"
     JOIN "public"."camera_checks" "cc" ON (("cc"."camera_uid" = "ucv"."id")))
     JOIN "public"."camera_script_start_times_manual_client" "csstm" ON (("csstm"."generated_uid" = "cc"."last_check_uid")))
  ORDER BY "csstm"."generated_uid", "ucv"."user_id", "csstm"."date" DESC, "csstm"."time" DESC;
CREATE TABLE IF NOT EXISTS "public"."camera_statistics" (
    "changed_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "id" bigint NOT NULL,
    "installed" boolean,
    "active" boolean,
    "model" "text" DEFAULT ''::"text",
    "name" "text" DEFAULT ''::"text",
    "changes" "text" DEFAULT ''::"text",
    "changed_by" "uuid" DEFAULT "auth"."uid"(),
    "camera_id" "text" NOT NULL,
    "coordinates" "text",
    "image" "text",
    "iccid" "text",
    "imei" "text"
);
ALTER TABLE "public"."camera_statistics" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."camera_statistics_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."camera_statistics_view" WITH ("security_invoker"='true') AS
 SELECT "cs"."changed_at",
    "cs"."id",
    "cs"."installed",
    "cs"."active",
    "cs"."model",
    "cs"."name",
    "cs"."changes",
    "cs"."changed_by",
    "cs"."camera_id",
    "cs"."coordinates",
    "cs"."image",
    "cs"."iccid",
    "cs"."imei"
   FROM "public"."camera_statistics" "cs";
CREATE OR REPLACE VIEW "public"."users_view" AS
SELECT
    NULL::"uuid" AS "id",
    NULL::timestamp with time zone AS "created_at",
    NULL::"text" AS "username",
    NULL::"text" AS "email",
    NULL::"text" AS "phone",
    NULL::"text" AS "onesignal_subscription_id",
    NULL::"text" AS "profile_image",
    NULL::"text" AS "company_key_name",
    NULL::boolean AS "subscribed",
    NULL::boolean AS "is_intervention",
    NULL::"text" AS "role",
    NULL::bigint AS "location_count",
    NULL::bigint AS "camera_count",
    NULL::bigint AS "company_count";
CREATE OR REPLACE VIEW "public"."camera_users_view" WITH ("security_invoker"='true') AS
 SELECT "utc"."camera_id",
    "u"."id",
    "u"."created_at",
    "u"."username",
    "u"."email",
    "u"."phone",
    "u"."onesignal_subscription_id",
    "u"."profile_image",
    "u"."company_key_name",
    "u"."subscribed",
    "u"."is_intervention",
    "u"."role",
    "u"."location_count",
    "u"."camera_count",
    "u"."company_count"
   FROM ("public"."user_to_camera" "utc"
     JOIN "public"."users_view" "u" ON (("u"."id" = "utc"."user_id")));
CREATE TABLE IF NOT EXISTS "public"."companies" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text",
    "type" "text",
    "CUI" "text",
    "phone_number" "text",
    "email" "text",
    "registrul_comertului" "text",
    "address" "text",
    "image" "text"
);
ALTER TABLE "public"."companies" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."companies_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."custom_company_types" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "company_id" bigint,
    "type" "text"
);
CREATE OR REPLACE VIEW "public"."companies_view" WITH ("security_invoker"='true') AS
 SELECT "co"."id",
    "co"."created_at",
    "co"."name",
    "co"."type",
    "co"."CUI",
    "co"."phone_number",
    "co"."email",
    "co"."registrul_comertului",
    "co"."address",
    "co"."image",
    "cct"."type" AS "custom_type"
   FROM ("public"."companies" "co"
     LEFT JOIN "public"."custom_company_types" "cct" ON (("cct"."company_id" = "co"."id")));
CREATE TABLE IF NOT EXISTS "public"."company_activity_report_notifications" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "report_id" bigint NOT NULL,
    "location_id" bigint NOT NULL,
    "from_date" timestamp with time zone,
    "duration" integer,
    "description" "text"
);
ALTER TABLE "public"."company_activity_report_notifications" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."company_activity_report_notifications_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."company_activity_report_notifications_view" WITH ("security_invoker"='true') AS
 SELECT "carn"."id",
    "carn"."created_at",
    "carn"."report_id",
    "carn"."location_id",
    "carn"."from_date",
    "carn"."duration",
    "carn"."description",
    "l"."name" AS "location_name"
   FROM ("public"."company_activity_report_notifications" "carn"
     JOIN "public"."locations" "l" ON (("carn"."location_id" = "l"."id")));
CREATE TABLE IF NOT EXISTS "public"."company_activity_reports" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "company_id" bigint NOT NULL,
    "company_name" "text",
    "title" "text",
    "description" "text",
    "from_date" timestamp with time zone,
    "to_date" timestamp with time zone
);
ALTER TABLE "public"."company_activity_reports" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."company_activity_reports_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."company_activity_reports_latest_view" AS
SELECT
    NULL::bigint AS "id",
    NULL::timestamp with time zone AS "created_at",
    NULL::bigint AS "company_id",
    NULL::"text" AS "company_name",
    NULL::"text" AS "title",
    NULL::"text" AS "description",
    NULL::timestamp with time zone AS "from_date",
    NULL::timestamp with time zone AS "to_date",
    NULL::bigint AS "count";
CREATE OR REPLACE VIEW "public"."company_activity_reports_view" AS
SELECT
    NULL::bigint AS "id",
    NULL::timestamp with time zone AS "created_at",
    NULL::bigint AS "company_id",
    NULL::"text" AS "company_name",
    NULL::"text" AS "title",
    NULL::"text" AS "description",
    NULL::timestamp with time zone AS "from_date",
    NULL::timestamp with time zone AS "to_date",
    NULL::bigint AS "count";
CREATE OR REPLACE VIEW "public"."company_available_locations_view" WITH ("security_invoker"='true') AS
 SELECT "l"."id",
    "l"."name",
    "l"."image",
    "l"."warranty",
    "l"."intervention",
    "l"."monitoring",
    "l"."solar",
    "l"."mobile_internet",
    "l"."installer",
    "l"."coordinates",
    "l"."maintenence",
    "l"."address",
    "l"."company_id"
   FROM "public"."locations" "l"
  WHERE ("l"."company_id" IS NULL);
CREATE OR REPLACE VIEW "public"."company_location_notifications_latest_view" WITH ("security_invoker"='true') AS
 WITH "timespan" AS (
         SELECT "now"() AS "today",
            ("now"() - '1 day'::interval) AS "yesterday"
        )
 SELECT "carn"."id",
    "carn"."created_at",
    "carn"."report_id",
    "carn"."location_id",
    "carn"."from_date",
    "carn"."duration",
    "carn"."description",
    "timespan"."today",
    "timespan"."yesterday"
   FROM ("public"."company_activity_report_notifications" "carn"
     CROSS JOIN "timespan")
  WHERE (("carn"."created_at" <= "timespan"."today") AND ("carn"."created_at" >= "timespan"."yesterday"));
CREATE OR REPLACE VIEW "public"."company_locations_view" AS
SELECT
    NULL::bigint AS "id",
    NULL::character varying(50) AS "name",
    NULL::"text" AS "image",
    NULL::boolean AS "warranty",
    NULL::boolean AS "intervention",
    NULL::boolean AS "monitoring",
    NULL::boolean AS "solar",
    NULL::boolean AS "mobile_internet",
    NULL::"text" AS "installer",
    NULL::"text" AS "coordinates",
    NULL::"text" AS "maintenence",
    NULL::"text" AS "address",
    NULL::bigint AS "company_id",
    NULL::bigint AS "camera_count",
    NULL::bigint AS "user_count",
    NULL::"text" AS "company_name";
CREATE TABLE IF NOT EXISTS "public"."company_types" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "type" "text"
);
ALTER TABLE "public"."company_types" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."company_types_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."company_types_view" WITH ("security_invoker"='true') AS
 SELECT "ct"."id",
    "ct"."created_at",
    "ct"."type"
   FROM "public"."company_types" "ct";
CREATE TABLE IF NOT EXISTS "public"."user_roles" (
    "id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "role" "text" NOT NULL
);
COMMENT ON TABLE "public"."user_roles" IS 'Application roles for each user.';

CREATE OR REPLACE VIEW "public"."company_users_view" WITH ("security_invoker"='true') AS
 SELECT "utc"."company_id",
    "u"."id",
    "u"."created_at",
    "u"."username",
    "u"."email",
    "u"."phone",
    "u"."onesignal_subscription_id",
    "u"."profile_image",
    "u"."company_key_name",
    "u"."subscribed",
    "u"."is_intervention",
    "u"."role",
    "u"."location_count",
    "u"."camera_count",
    "u"."company_count"
   FROM (("public"."user_to_company" "utc"
     JOIN "public"."users_view" "u" ON (("u"."id" = "utc"."user_id")))
     LEFT JOIN "public"."user_roles" "ur" ON (("ur"."user_id" = "utc"."user_id")));
CREATE OR REPLACE VIEW "public"."cron_job_table" WITH ("security_invoker"='true') AS
 SELECT "job"."jobid",
    "job"."schedule",
    "job"."command",
    "job"."nodename",
    "job"."nodeport",
    "job"."database",
    "job"."username",
    "job"."active",
    "job"."jobname"
   FROM "cron"."job";
ALTER TABLE "public"."custom_company_types" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."custom_company_types_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."email_ai_attachments" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "email_id" bigint NOT NULL,
    "attachment_path" "text",
    "llava_description" "text"
);
COMMENT ON TABLE "public"."email_ai_attachments" IS 'This is a duplicate of email_attachments';

ALTER TABLE "public"."email_ai_attachments" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."email_ai_attachments_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."email_ai_attachments_result" WITH ("security_invoker"='true') AS
 SELECT "eaa"."id",
    "eaa"."created_at",
    "eaa"."email_id",
    "eaa"."attachment_path",
    "eaa"."llava_description"
   FROM "public"."email_ai_attachments" "eaa"
  WHERE ("eaa"."attachment_path" ~~ '%result%'::"text");
CREATE TABLE IF NOT EXISTS "public"."email_attachments" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "email_id" bigint NOT NULL,
    "attachment_path" "text"
);
CREATE TABLE IF NOT EXISTS "public"."location_reports" (
    "id" bigint NOT NULL,
    "location_id" bigint,
    "snoozed_motion" integer,
    "monitored_motion" integer,
    "to_date" "date",
    "created_at" timestamp with time zone DEFAULT "now"(),
    "location_name" "text",
    "alerted_motion" integer DEFAULT 0,
    "from_date" "date",
    "time" time without time zone,
    "camera_count" smallint DEFAULT '0'::smallint,
    "from_date_timestamp" timestamp with time zone,
    "to_date_timestamp" timestamp with time zone
);
CREATE OR REPLACE VIEW "public"."emails_alerted_today_view" WITH ("security_invoker"='true') AS
 WITH "timespan" AS (
         SELECT "now"() AS "today",
            ("now"() - '1 day'::interval) AS "yesterday"
        ), "latest_location_reports" AS (
         SELECT "lr_1"."id",
            "lr_1"."location_id",
            "lr_1"."snoozed_motion",
            "lr_1"."monitored_motion",
            "lr_1"."to_date",
            "lr_1"."created_at",
            "lr_1"."location_name",
            "lr_1"."alerted_motion",
            "lr_1"."from_date",
            "lr_1"."time",
            "lr_1"."camera_count",
            "lr_1"."from_date_timestamp",
            "lr_1"."to_date_timestamp",
            "lr_1"."today",
            "lr_1"."yesterday",
            "lr_1"."rn"
           FROM ( SELECT "location_reports"."id",
                    "location_reports"."location_id",
                    "location_reports"."snoozed_motion",
                    "location_reports"."monitored_motion",
                    "location_reports"."to_date",
                    "location_reports"."created_at",
                    "location_reports"."location_name",
                    "location_reports"."alerted_motion",
                    "location_reports"."from_date",
                    "location_reports"."time",
                    "location_reports"."camera_count",
                    "location_reports"."from_date_timestamp",
                    "location_reports"."to_date_timestamp",
                    "ts_1"."today",
                    "ts_1"."yesterday",
                    "row_number"() OVER (PARTITION BY "location_reports"."location_id" ORDER BY "location_reports"."to_date_timestamp" DESC, "location_reports"."time" DESC) AS "rn"
                   FROM ("public"."location_reports"
                     CROSS JOIN "timespan" "ts_1")) "lr_1"
          WHERE ("lr_1"."rn" = 1)
        )
 SELECT "lr"."id" AS "location_report_id",
    "lr"."from_date_timestamp",
    "lr"."to_date_timestamp",
    "ts"."today",
    "ts"."yesterday",
    "e"."id",
    "e"."created_at",
    "e"."camera_name",
    "e"."from_address",
    "e"."to_address",
    "e"."subject",
    "e"."finished_time",
    "e"."body",
    "e"."snapshot_path",
    "e"."motion_type",
    "e"."read_state",
    "e"."opened_by",
    "e"."attachment_type",
    "e"."opened_at",
    "e"."monitoring_shift",
    "e"."email_time",
    "e"."snooze_id",
    "e"."location_id",
    "e"."alert",
    "e"."alert_cancelled",
    "e"."description",
    "e"."alerted_by"
   FROM (("latest_location_reports" "lr"
     CROSS JOIN "timespan" "ts")
     JOIN "public"."emails_alerted" "e" ON (("lr"."location_id" = "e"."location_id")))
  WHERE (("e"."alert" = true) AND (("e"."email_time" >= "lr"."from_date_timestamp") AND ("e"."email_time" <= "lr"."to_date_timestamp")))
  ORDER BY "e"."created_at" DESC;
CREATE OR REPLACE VIEW "public"."email_attachments_alerted_today_view" WITH ("security_invoker"='true') AS
 SELECT "ea"."id",
    "ea"."created_at",
    "ea"."email_id",
    "ea"."attachment_path"
   FROM ("public"."emails_alerted_today_view" "eat"
     JOIN "public"."email_attachments" "ea" ON (("eat"."id" = "ea"."email_id")))
  ORDER BY "ea"."created_at" DESC;
ALTER TABLE "public"."email_attachments" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."email_attachments_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."emails" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "camera_name" "text",
    "from_address" "text",
    "to_address" "text",
    "subject" "text",
    "finished_time" "text",
    "body" "text",
    "snapshot_path" "text",
    "motion_type" "text",
    "read_state" "text" DEFAULT 'false'::"text",
    "opened_by" "uuid",
    "attachment_type" "text",
    "opened_at" time without time zone,
    "monitoring_shift" smallint,
    "email_time" timestamp with time zone,
    "snooze_id" bigint,
    "location_id" bigint,
    "alert" boolean DEFAULT false,
    "alert_cancelled" boolean DEFAULT false,
    "number_plates" "text"[] DEFAULT '{}'::"text"[]
);
CREATE TABLE IF NOT EXISTS "public"."emails_ai" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "camera_name" "text",
    "from_address" "text",
    "to_address" "text",
    "subject" "text",
    "finished_time" "text",
    "body" "text",
    "snapshot_path" "text",
    "motion_type" "text",
    "read_state" "text" DEFAULT 'false'::"text",
    "opened_by" "uuid",
    "attachment_type" "text",
    "opened_at" time without time zone,
    "monitoring_shift" smallint,
    "email_time" timestamp with time zone,
    "snooze_id" bigint,
    "location_id" bigint,
    "alert" boolean DEFAULT false,
    "alert_cancelled" boolean DEFAULT false,
    "number_plates" "text"[] DEFAULT '{}'::"text"[],
    "details" "text",
    "location_name" "text",
    "llava_description" "text",
    "llava_differences" "text"
);
COMMENT ON TABLE "public"."emails_ai" IS 'This is a duplicate of emails';

COMMENT ON COLUMN "public"."emails_ai"."llava_differences" IS 'The difference between the original image and the previous image, as seen by llava';

ALTER TABLE "public"."emails_ai" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."emails_ai_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."emails_alerted_by_location_report_view" WITH ("security_invoker"='true') AS
 SELECT "lr"."id" AS "location_report_id",
    "ea"."id",
    "ea"."created_at",
    "ea"."camera_name",
    "ea"."from_address",
    "ea"."to_address",
    "ea"."subject",
    "ea"."finished_time",
    "ea"."body",
    "ea"."snapshot_path",
    "ea"."motion_type",
    "ea"."read_state",
    "ea"."opened_by",
    "ea"."attachment_type",
    "ea"."opened_at",
    "ea"."monitoring_shift",
    "ea"."email_time",
    "ea"."snooze_id",
    "ea"."location_id",
    "ea"."alert",
    "ea"."alert_cancelled",
    "ea"."description",
    "ea"."alerted_by"
   FROM ("public"."location_reports" "lr"
     JOIN "public"."emails_alerted" "ea" ON ((("ea"."location_id" = "lr"."location_id") AND (("ea"."email_time" >= "lr"."from_date_timestamp") AND ("ea"."email_time" <= "lr"."to_date_timestamp")))))
  ORDER BY "lr"."id" DESC;
ALTER TABLE "public"."emails_alerted" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."emails_alerted_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."emails_current_snoozed_user_view" WITH ("security_invoker"='true') AS
 SELECT "e"."id",
    "e"."created_at",
    "e"."camera_name",
    "e"."from_address",
    "e"."to_address",
    "e"."subject",
    "e"."finished_time",
    "e"."body",
    "e"."snapshot_path",
    "e"."motion_type",
    "e"."read_state",
    "e"."opened_by",
    "e"."attachment_type",
    "e"."opened_at",
    "e"."monitoring_shift",
    "e"."email_time",
    "e"."snooze_id",
    "e"."location_id",
    "e"."alert",
    "e"."alert_cancelled",
    "la"."location_name",
    "la"."user_id",
    "la"."duration",
    "la"."current_time",
    "la"."end_time",
    "la"."created_at" AS "start_timestamp",
    "la"."end_timestamp",
    "la"."snooze_status",
    "la"."stopped_timestamp"
   FROM ("public"."emails" "e"
     JOIN ( SELECT "location_activities"."id",
            "location_activities"."created_at",
            "location_activities"."location_id",
            "location_activities"."user_id",
            "location_activities"."snooze_status",
            "location_activities"."current_time",
            "location_activities"."end_time",
            "location_activities"."active",
            "location_activities"."location_name",
            "location_activities"."end_timestamp",
            "location_activities"."duration",
            "location_activities"."stopped_timestamp"
           FROM "public"."location_activities"
          WHERE (("location_activities"."user_id" = "auth"."uid"()) AND ("location_activities"."created_at" <= "now"()) AND (("location_activities"."end_timestamp" >= "now"()) OR ("location_activities"."stopped_timestamp" >= "now"())) AND ("location_activities"."duration" > 0))) "la" ON ((("e"."snooze_id" = "la"."id") AND ("e"."email_time" >= "la"."created_at") AND ("e"."email_time" <= "la"."end_timestamp"))))
  ORDER BY "e"."id" DESC;
CREATE OR REPLACE VIEW "public"."emails_current_snoozed_view" WITH ("security_invoker"='true') AS
 SELECT "e"."id",
    "e"."created_at",
    "e"."camera_name",
    "e"."from_address",
    "e"."to_address",
    "e"."subject",
    "e"."finished_time",
    "e"."body",
    "e"."snapshot_path",
    "e"."motion_type",
    "e"."read_state",
    "e"."opened_by",
    "e"."attachment_type",
    "e"."opened_at",
    "e"."monitoring_shift",
    "e"."email_time",
    "e"."snooze_id",
    "e"."location_id",
    "e"."alert",
    "e"."alert_cancelled",
    "la"."location_name",
    "la"."user_id",
    "la"."duration",
    "la"."current_time",
    "la"."end_time",
    "la"."created_at" AS "start_timestamp",
    "la"."end_timestamp",
    "la"."snooze_status",
    "la"."stopped_timestamp"
   FROM ("public"."emails" "e"
     JOIN ( SELECT "location_activities"."id",
            "location_activities"."created_at",
            "location_activities"."location_id",
            "location_activities"."user_id",
            "location_activities"."snooze_status",
            "location_activities"."current_time",
            "location_activities"."end_time",
            "location_activities"."active",
            "location_activities"."location_name",
            "location_activities"."end_timestamp",
            "location_activities"."duration",
            "location_activities"."stopped_timestamp"
           FROM "public"."location_activities"
          WHERE (("location_activities"."created_at" <= "now"()) AND (("location_activities"."end_timestamp" >= "now"()) OR ("location_activities"."stopped_timestamp" >= "now"())) AND ("location_activities"."duration" > 0))) "la" ON ((("e"."snooze_id" = "la"."id") AND ("e"."email_time" >= "la"."created_at") AND ("e"."email_time" <= "la"."end_timestamp"))))
  ORDER BY "e"."id" DESC;
ALTER TABLE "public"."emails" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."emails_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."emails_monitored_view" WITH ("security_invoker"='true') AS
 SELECT "e"."id",
    "e"."created_at",
    "e"."camera_name",
    "e"."from_address",
    "e"."to_address",
    "e"."subject",
    "e"."finished_time",
    "e"."body",
    "e"."snapshot_path",
    "e"."motion_type",
    "e"."read_state",
    "e"."opened_by",
    "e"."attachment_type",
    "e"."opened_at",
    "e"."monitoring_shift",
    "e"."email_time",
    "e"."snooze_id",
    "e"."location_id",
    "e"."alert",
    "e"."alert_cancelled",
    "e"."number_plates"
   FROM "public"."emails" "e"
  WHERE ("e"."snooze_id" IS NULL)
  ORDER BY "e"."id" DESC
 LIMIT 100;
CREATE OR REPLACE VIEW "public"."emails_snoozed_view" WITH ("security_invoker"='true') AS
 SELECT "e"."id",
    "e"."created_at",
    "e"."camera_name",
    "e"."from_address",
    "e"."to_address",
    "e"."subject",
    "e"."finished_time",
    "e"."body",
    "e"."snapshot_path",
    "e"."motion_type",
    "e"."read_state",
    "e"."opened_by",
    "e"."attachment_type",
    "e"."opened_at",
    "e"."monitoring_shift",
    "e"."email_time",
    "e"."snooze_id",
    "e"."location_id",
    "e"."alert",
    "e"."alert_cancelled",
    "la"."created_at" AS "start_timestamp",
    "la"."end_timestamp",
    "la"."location_name",
    "u"."id" AS "snoozed_by_id",
    "u"."username" AS "snoozed_by_user",
    "u"."email" AS "snoozed_by_email",
    "la"."duration",
    "la"."current_time",
    "la"."end_time",
    "la"."snooze_status",
    "la"."stopped_timestamp"
   FROM (("public"."emails" "e"
     JOIN "public"."location_activities" "la" ON (("e"."snooze_id" = "la"."id")))
     LEFT JOIN "public"."users" "u" ON (("u"."id" = "la"."user_id")))
  ORDER BY "e"."id" DESC;
CREATE OR REPLACE VIEW "public"."emails_view" WITH ("security_invoker"='true') AS
 SELECT "e"."id",
    "e"."created_at",
    "e"."camera_name",
    "e"."from_address",
    "e"."to_address",
    "e"."subject",
    "e"."finished_time",
    "e"."body",
    "e"."snapshot_path",
    "e"."motion_type",
    "e"."read_state",
    "e"."opened_by",
    "e"."attachment_type",
    "e"."opened_at",
    "e"."monitoring_shift",
    "e"."email_time",
    "e"."snooze_id",
    "e"."location_id",
    "e"."alert",
    "e"."alert_cancelled"
   FROM "public"."emails" "e";
CREATE OR REPLACE VIEW "public"."latest_camera_check_view" WITH ("security_invoker"='true') AS
 WITH "last_uid" AS (
         SELECT "camera_script_start_times_automated"."generated_uid"
           FROM "public"."camera_script_start_times_automated"
          ORDER BY "camera_script_start_times_automated"."id" DESC
         LIMIT 1
        )
 SELECT "cc"."id",
    "cc"."created_at",
    "cc"."camera_name",
    "cc"."camera_uid",
    "cc"."date",
    "cc"."time",
    "cc"."channel_id",
    "cc"."charge_status",
    "cc"."adapter_status",
    "cc"."voltage",
    "cc"."current",
    "cc"."temperature",
    "cc"."battery_percent",
    "cc"."low_power",
    "cc"."battery_version",
    "cc"."pir_status",
    "cc"."cam_index",
    "cc"."camera_status",
    "cc"."snapshot_path",
    "cc"."last_check_uid",
    "cc"."verification_status",
    "cc"."opened_by_uuid",
    "cc"."opened_time",
    "cc"."location_id",
    "cc"."rotation_info",
    "cc"."rotation_description",
    "lu"."generated_uid"
   FROM ("public"."camera_checks" "cc"
     JOIN "last_uid" "lu" ON (("cc"."last_check_uid" = "lu"."generated_uid")));
CREATE TABLE IF NOT EXISTS "public"."links" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "expiration_time" "text",
    "uid" "text",
    "link" "text"
);
ALTER TABLE "public"."links" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."links_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."location_cameras_view" WITH ("security_invoker"='true') AS
 SELECT "ltc"."location_id",
    "l"."name" AS "location_name",
    "c"."id",
    "c"."created_at",
    "c"."name",
    "c"."model",
    "c"."sim_card_id",
    "c"."image",
    "c"."coordinates",
    "c"."is_nvr",
    "c"."edited_at",
    "c"."mobile_data",
    "c"."battery",
    "c"."solar",
    "c"."wifi",
    "c"."poe",
    "c"."ptz",
    "c"."pir",
    "c"."person_detection",
    "c"."vehicle_detection",
    "c"."motion_detection",
    "c"."model_image",
    "c"."iccid",
    "c"."imei",
    "c"."provider",
    "c"."active",
    "c"."logo"
   FROM (("public"."location_to_camera" "ltc"
     JOIN "public"."cameras_view" "c" ON (("c"."id" = "ltc"."camera_id")))
     JOIN "public"."locations" "l" ON (("l"."id" = "ltc"."location_id")));
CREATE TABLE IF NOT EXISTS "public"."location_code_share" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "location_id" bigint,
    "code" bigint,
    "location_name" "text"
);
ALTER TABLE "public"."location_code_share" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."location_code_share_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."location_intervention" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "location_id" bigint,
    "user_id" "uuid"
);
ALTER TABLE "public"."location_intervention" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."location_intervention_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."location_intervention_view" WITH ("security_invoker"='true') AS
 WITH "location_users_and_intervention" AS (
         SELECT NULL::bigint AS "utl_id",
            "l"."id" AS "location_id",

            "u"."id",
            "u"."created_at",
            "u"."username",
            "u"."email",
            "u"."phone",
            "u"."onesignal_subscription_id",
            "u"."profile_image",
            "u"."company_key_name",
            "u"."subscribed",
            "u"."is_intervention"
           FROM (("public"."users" "u"
             JOIN "public"."user_to_company" "utc" ON (("utc"."user_id" = "u"."id")))
             JOIN "public"."locations" "l" ON (("l"."company_id" = "utc"."company_id")))
        UNION ALL
         SELECT "utl"."id" AS "utl_id",
            "utl"."location_id",
                CASE
                    WHEN "u"."is_intervention" THEN 'Intervention'::"text"
                    ELSE 'Manager'::"text"
                END AS "type",
            "u"."id",
            "u"."created_at",
            "u"."username",
            "u"."email",
            "u"."phone",
            "u"."onesignal_subscription_id",
            "u"."profile_image",
            "u"."company_key_name",
            "u"."subscribed",
            "u"."is_intervention"
           FROM ("public"."users" "u"
             JOIN "public"."user_to_location" "utl" ON (("utl"."user_id" = "u"."id")))
        )
 SELECT "location_users_and_intervention"."utl_id",
    "location_users_and_intervention"."location_id",
    "location_users_and_intervention"."type",
    "location_users_and_intervention"."id",
    "location_users_and_intervention"."created_at",
    "location_users_and_intervention"."username",
    "location_users_and_intervention"."email",
    "location_users_and_intervention"."phone",
    "location_users_and_intervention"."onesignal_subscription_id",
    "location_users_and_intervention"."profile_image",
    "location_users_and_intervention"."company_key_name",
    "location_users_and_intervention"."subscribed",
    "location_users_and_intervention"."is_intervention"
   FROM "location_users_and_intervention"
  ORDER BY "location_users_and_intervention"."location_id" DESC, "location_users_and_intervention"."type" DESC;
ALTER TABLE "public"."location_reports" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."location_reports_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."location_schedule" (
    "id" integer NOT NULL,
    "location_id" integer NOT NULL,
    "is_monday_nonstop" boolean DEFAULT false NOT NULL,
    "monday" time without time zone[],
    "is_tuesday_nonstop" boolean DEFAULT false NOT NULL,
    "tuesday" time without time zone[],
    "is_wednesday_nonstop" boolean DEFAULT false NOT NULL,
    "wednesday" time without time zone[],
    "is_thursday_nonstop" boolean DEFAULT false NOT NULL,
    "thursday" time without time zone[],
    "is_friday_nonstop" boolean DEFAULT false NOT NULL,
    "friday" time without time zone[],
    "is_saturday_nonstop" boolean DEFAULT false NOT NULL,
    "saturday" time without time zone[],
    "is_sunday_nonstop" boolean DEFAULT false NOT NULL,
    "sunday" time without time zone[]
);
CREATE SEQUENCE IF NOT EXISTS "public"."location_schedule_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE "public"."location_schedule_id_seq" OWNED BY "public"."location_schedule"."id";

ALTER TABLE "public"."location_to_camera" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."location_to_camera_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."location_users_view" WITH ("security_invoker"='true') AS
 SELECT "utl"."location_id",
    "u"."id",
    "u"."created_at",
    "u"."username",
    "u"."email",
    "u"."phone",
    "u"."onesignal_subscription_id",
    "u"."profile_image",
    "u"."company_key_name",
    "u"."subscribed",
    "u"."is_intervention",
    "u"."role",
    "u"."location_count",
    "u"."camera_count",
    "u"."company_count"
   FROM ("public"."user_to_location" "utl"
     LEFT JOIN "public"."users_view" "u" ON (("u"."id" = "utl"."user_id")));
CREATE OR REPLACE VIEW "public"."locations_current_snoozed_user_view" WITH ("security_invoker"='true') AS
 SELECT DISTINCT
        CASE
            WHEN ("utl"."user_id" = "auth"."uid"()) THEN "utl"."user_id"
            ELSE NULL::"uuid"

    "l"."id",
    "l"."name",
    "l"."image",
    "l"."warranty",
    "l"."intervention",
    "l"."monitoring",
    "l"."solar",
    "l"."mobile_internet",
    "l"."installer",
    "l"."coordinates",
    "l"."maintenence",
    "l"."address",
    "l"."company_id",
    "la"."id" AS "snooze_id",
    "la"."end_timestamp",
    "la"."created_at" AS "start_timestamp",
    "la"."stopped_timestamp",
    "la"."duration",
    "la"."user_id" AS "snoozed_by_user_id",
    "la"."current_time",
    "la"."end_time",
    "la"."active",
    "la"."snooze_status",
    "now"() AS "current_timestamp",
        CASE
            WHEN ("u"."id" = "la"."user_id") THEN "u"."username"
            ELSE NULL::"text"
        END AS "snoozed_by_username",
        CASE
            WHEN ("u"."id" = "la"."user_id") THEN "u"."email"
            ELSE NULL::"text"
        END AS "snoozed_by_email",
        CASE
            WHEN ("u"."id" = "la"."user_id") THEN "u"."phone"
            ELSE NULL::"text"
        END AS "snoozed_by_phone"
   FROM (((( SELECT "utl_1"."user_id",
            "utl_1"."location_id"
           FROM "public"."user_to_location" "utl_1"
        UNION
         SELECT "utc"."user_id",
            "l_1"."id"
           FROM ("public"."user_to_company" "utc"
             JOIN "public"."locations" "l_1" ON (("utc"."company_id" = "l_1"."company_id")))) "utl"
     JOIN ( SELECT "location_activities"."id",
            "location_activities"."created_at",
            "location_activities"."location_id",
            "location_activities"."user_id",
            "location_activities"."snooze_status",
            "location_activities"."current_time",
            "location_activities"."end_time",
            "location_activities"."active",
            "location_activities"."location_name",
            "location_activities"."end_timestamp",
            "location_activities"."duration",
            "location_activities"."stopped_timestamp"
           FROM "public"."location_activities"
          WHERE (("location_activities"."created_at" <= "now"()) AND (("location_activities"."end_timestamp" >= "now"()) OR ("location_activities"."stopped_timestamp" >= "now"())) AND ("location_activities"."duration" > 0))) "la" ON (("utl"."location_id" = "la"."location_id")))
     LEFT JOIN "public"."users" "u" ON (("u"."id" = "utl"."user_id")))
     LEFT JOIN "public"."locations" "l" ON (("l"."id" = "utl"."location_id")));
CREATE OR REPLACE VIEW "public"."locations_current_snoozed_view" WITH ("security_invoker"='true') AS
 SELECT DISTINCT "l"."id",
    "l"."name",
    "l"."image",
    "l"."warranty",
    "l"."intervention",
    "l"."monitoring",
    "l"."solar",
    "l"."mobile_internet",
    "l"."installer",
    "l"."coordinates",
    "l"."maintenence",
    "l"."address",
    "l"."company_id",
    "la"."id" AS "snooze_id",
    "la"."end_timestamp",
    "la"."created_at" AS "start_timestamp",
    "la"."stopped_timestamp",
    "la"."duration",
    "la"."user_id" AS "snoozed_by_user_id",
    "la"."current_time",
    "la"."end_time",
    "la"."active",
    "la"."snooze_status",
    "now"() AS "current_timestamp",
        CASE
            WHEN ("u"."id" = "la"."user_id") THEN "u"."username"
            ELSE NULL::"text"
        END AS "snoozed_by_username",
        CASE
            WHEN ("u"."id" = "la"."user_id") THEN "u"."email"
            ELSE NULL::"text"
        END AS "snoozed_by_email",
        CASE
            WHEN ("u"."id" = "la"."user_id") THEN "u"."phone"
            ELSE NULL::"text"
        END AS "snoozed_by_phone"
   FROM ((( SELECT "location_activities"."id",
            "location_activities"."created_at",
            "location_activities"."location_id",
            "location_activities"."user_id",
            "location_activities"."snooze_status",
            "location_activities"."current_time",
            "location_activities"."end_time",
            "location_activities"."active",
            "location_activities"."location_name",
            "location_activities"."end_timestamp",
            "location_activities"."duration",
            "location_activities"."stopped_timestamp"
           FROM "public"."location_activities"
          WHERE (("location_activities"."created_at" <= "now"()) AND (("location_activities"."end_timestamp" >= "now"()) OR ("location_activities"."stopped_timestamp" >= "now"())) AND ("location_activities"."duration" > 0))) "la"
     LEFT JOIN "public"."users" "u" ON (("u"."id" = "la"."user_id")))
     JOIN "public"."locations" "l" ON (("l"."id" = "la"."location_id")));
ALTER TABLE "public"."locations" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."locations_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."locations_snoozed_user_view" WITH ("security_invoker"='true') AS
 SELECT "la"."id" AS "activity_id",
    "la"."created_at" AS "start_timestamp",
    "now"() AS "current_timestamp",
    "la"."end_timestamp",
    "l"."id",
    "l"."name",
    "l"."image",
    "l"."warranty",
    "l"."intervention",
    "l"."monitoring",
    "l"."solar",
    "l"."mobile_internet",
    "l"."installer",
    "l"."coordinates",
    "l"."maintenence",
    "l"."address",
    "l"."company_id",

    "u"."username" AS "snoozed_by_username",
    "u"."email" AS "snoozed_by_email"
   FROM ((("public"."location_activities" "la"
     LEFT JOIN "public"."user_to_location" "utl" ON ((("utl"."user_id" = "auth"."uid"()) AND ("utl"."location_id" = "la"."location_id"))))
     JOIN "public"."locations" "l" ON (("l"."id" = "la"."location_id")))
     LEFT JOIN "public"."users" "u" ON (("la"."user_id" = "u"."id")))
  ORDER BY "la"."id" DESC;
CREATE OR REPLACE VIEW "public"."locations_snoozed_view" WITH ("security_invoker"='true') AS
 SELECT "la"."id" AS "activity_id",
    "la"."created_at" AS "start_timestamp",
    "now"() AS "current_timestamp",
    "la"."end_timestamp",
    "l"."id",
    "l"."name",
    "l"."image",
    "l"."warranty",
    "l"."intervention",
    "l"."monitoring",
    "l"."solar",
    "l"."mobile_internet",
    "l"."installer",
    "l"."coordinates",
    "l"."maintenence",
    "l"."address",
    "l"."company_id",
    "u"."username",
    "u"."email"
   FROM (("public"."location_activities" "la"
     JOIN "public"."locations" "l" ON (("l"."id" = "la"."location_id")))
     LEFT JOIN "public"."users" "u" ON (("la"."user_id" = "u"."id")))
  ORDER BY "la"."id" DESC;
CREATE OR REPLACE VIEW "public"."locations_view" AS
SELECT
    NULL::bigint AS "id",
    NULL::character varying(50) AS "name",
    NULL::"text" AS "image",
    NULL::boolean AS "warranty",
    NULL::boolean AS "intervention",
    NULL::boolean AS "monitoring",
    NULL::boolean AS "solar",
    NULL::boolean AS "mobile_internet",
    NULL::"text" AS "installer",
    NULL::"text" AS "coordinates",
    NULL::"text" AS "maintenence",
    NULL::"text" AS "address",
    NULL::bigint AS "company_id",
    NULL::bigint AS "camera_count",
    NULL::bigint AS "user_count",
    NULL::"text" AS "company_name";
CREATE OR REPLACE VIEW "public"."monitoring_call_order_view" WITH ("security_invoker"='true') AS
 SELECT "mco"."id",
    "mco"."created_at",
    "mco"."location_id",
    "mco"."user_id",
    "mco"."ord",
    "mco"."user_type",
    "u"."username",
    "u"."email",
    "u"."phone",
    "u"."is_intervention"
   FROM ("public"."monitoring_call_order" "mco"
     JOIN "public"."users" "u" ON (("u"."id" = "mco"."user_id")))
  ORDER BY "mco"."ord";
ALTER TABLE "public"."monitoring_call_order" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."monitoring_phone_order_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."monitoring_timetable" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "time_start" "text",
    "time_end" "text",
    "value" smallint,
    "default_user" "text",
    "replacement_user" "text"
);
ALTER TABLE "public"."monitoring_timetable" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."monitoring_timetable_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."motion_data_hourly" (
    "id" bigint NOT NULL,
    "location_id" bigint,
    "camera_id" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "date" "date" NOT NULL,
    "hour" smallint NOT NULL,
    "monitored_motion" bigint DEFAULT '-1'::bigint NOT NULL,
    "snoozed_motion" bigint DEFAULT '-1'::bigint NOT NULL,
    "alerted_motion" bigint NOT NULL,
    "motion_type" "text"
);
ALTER TABLE "public"."motion_data_hourly" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."motion_data_analysis_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."motion_data_by_location_view" WITH ("security_invoker"='true') AS
 SELECT "mda"."location_id",
    "mda"."date",
    "mda"."hour",
    ("sum"("mda"."monitored_motion"))::integer AS "monitored_motion",
    ("sum"("mda"."snoozed_motion"))::integer AS "snoozed_motion",
    ("sum"("mda"."alerted_motion"))::integer AS "alerted_motion",
    ((("sum"("mda"."monitored_motion"))::integer + ("sum"("mda"."snoozed_motion"))::integer) + ("sum"("mda"."alerted_motion"))::integer) AS "total_motion"
   FROM "public"."motion_data_hourly" "mda"
  GROUP BY "mda"."location_id", "mda"."date", "mda"."hour"
  ORDER BY "mda"."date" DESC, "mda"."hour" DESC;
CREATE OR REPLACE VIEW "public"."motion_data_type_percentage_view" WITH ("security_invoker"='true') AS
 WITH "motion_type_summed" AS (
         SELECT "mda"."location_id",
            "mda"."date",
            (("sum"("mda"."monitored_motion") + "sum"("mda"."snoozed_motion")) + "sum"("mda"."alerted_motion")) AS "total_motion",
            "sum"(
                CASE
                    WHEN ("mda"."motion_type" = 'person'::"text") THEN "mda"."monitored_motion"
                    ELSE (0)::bigint
                END) AS "monitored_motion_person",
            "sum"(
                CASE
                    WHEN ("mda"."motion_type" = 'vehicle'::"text") THEN "mda"."monitored_motion"
                    ELSE (0)::bigint
                END) AS "monitored_motion_vehicle",
            "sum"(
                CASE
                    WHEN ("mda"."motion_type" = 'pet'::"text") THEN "mda"."monitored_motion"
                    ELSE (0)::bigint
                END) AS "monitored_motion_pet",
            "sum"(
                CASE
                    WHEN ("mda"."motion_type" = 'motion'::"text") THEN "mda"."monitored_motion"
                    ELSE (0)::bigint
                END) AS "monitored_motion_other",
            "sum"("mda"."monitored_motion") AS "total_monitored_motion",
            "sum"(
                CASE
                    WHEN ("mda"."motion_type" = 'person'::"text") THEN "mda"."snoozed_motion"
                    ELSE (0)::bigint
                END) AS "snoozed_motion_person",
            "sum"(
                CASE
                    WHEN ("mda"."motion_type" = 'vehicle'::"text") THEN "mda"."snoozed_motion"
                    ELSE (0)::bigint
                END) AS "snoozed_motion_vehicle",
            "sum"(
                CASE
                    WHEN ("mda"."motion_type" = 'pet'::"text") THEN "mda"."snoozed_motion"
                    ELSE (0)::bigint
                END) AS "snoozed_motion_pet",
            "sum"(
                CASE
                    WHEN ("mda"."motion_type" = 'motion'::"text") THEN "mda"."snoozed_motion"
                    ELSE (0)::bigint
                END) AS "snoozed_motion_other",
            "sum"("mda"."snoozed_motion") AS "total_snoozed_motion",
            "sum"(
                CASE
                    WHEN ("mda"."motion_type" = 'person'::"text") THEN "mda"."alerted_motion"
                    ELSE (0)::bigint
                END) AS "alerted_motion_person",
            "sum"(
                CASE
                    WHEN ("mda"."motion_type" = 'vehicle'::"text") THEN "mda"."alerted_motion"
                    ELSE (0)::bigint
                END) AS "alerted_motion_vehicle",
            "sum"(
                CASE
                    WHEN ("mda"."motion_type" = 'pet'::"text") THEN "mda"."alerted_motion"
                    ELSE (0)::bigint
                END) AS "alerted_motion_pet",
            "sum"(
                CASE
                    WHEN ("mda"."motion_type" = 'motion'::"text") THEN "mda"."alerted_motion"
                    ELSE (0)::bigint
                END) AS "alerted_motion_other",
            "sum"("mda"."alerted_motion") AS "total_alerted_motion"
           FROM "public"."motion_data_hourly" "mda"
          GROUP BY "mda"."location_id", "mda"."date"
          ORDER BY "mda"."date" DESC, "mda"."location_id" DESC
        )
 SELECT "motion_type_summed"."location_id",
    "motion_type_summed"."date",
    "motion_type_summed"."total_motion",
    "motion_type_summed"."monitored_motion_person",
    "motion_type_summed"."monitored_motion_vehicle",
    "motion_type_summed"."monitored_motion_pet",
    "motion_type_summed"."monitored_motion_other",
    "motion_type_summed"."total_monitored_motion",
    "motion_type_summed"."snoozed_motion_person",
    "motion_type_summed"."snoozed_motion_vehicle",
    "motion_type_summed"."snoozed_motion_pet",
    "motion_type_summed"."snoozed_motion_other",
    "motion_type_summed"."total_snoozed_motion",
    "motion_type_summed"."alerted_motion_person",
    "motion_type_summed"."alerted_motion_vehicle",
    "motion_type_summed"."alerted_motion_pet",
    "motion_type_summed"."alerted_motion_other",
    "motion_type_summed"."total_alerted_motion",
        CASE
            WHEN ("motion_type_summed"."total_monitored_motion" = (0)::numeric) THEN 0.00000000000000000000
            ELSE ((100)::numeric * ("motion_type_summed"."monitored_motion_person" / "motion_type_summed"."total_monitored_motion"))
        END AS "monitored_motion_person_percentage",
        CASE
            WHEN ("motion_type_summed"."total_monitored_motion" = (0)::numeric) THEN 0.00000000000000000000
            ELSE ((100)::numeric * ("motion_type_summed"."monitored_motion_vehicle" / "motion_type_summed"."total_monitored_motion"))
        END AS "monitored_motion_vehicle_percentage",
        CASE
            WHEN ("motion_type_summed"."total_monitored_motion" = (0)::numeric) THEN 0.00000000000000000000
            ELSE ((100)::numeric * ("motion_type_summed"."monitored_motion_pet" / "motion_type_summed"."total_monitored_motion"))
        END AS "monitored_motion_pet_percentage",
        CASE
            WHEN ("motion_type_summed"."total_monitored_motion" = (0)::numeric) THEN 0.00000000000000000000
            ELSE ((100)::numeric * ("motion_type_summed"."monitored_motion_other" / "motion_type_summed"."total_monitored_motion"))
        END AS "monitored_motion_other_percentage",
        CASE
            WHEN ("motion_type_summed"."total_snoozed_motion" = (0)::numeric) THEN 0.00000000000000000000
            ELSE ((100)::numeric * ("motion_type_summed"."snoozed_motion_person" / "motion_type_summed"."total_snoozed_motion"))
        END AS "snoozed_motion_person_percentage",
        CASE
            WHEN ("motion_type_summed"."total_snoozed_motion" = (0)::numeric) THEN 0.00000000000000000000
            ELSE ((100)::numeric * ("motion_type_summed"."snoozed_motion_vehicle" / "motion_type_summed"."total_snoozed_motion"))
        END AS "snoozed_motion_vehicle_percentage",
        CASE
            WHEN ("motion_type_summed"."total_snoozed_motion" = (0)::numeric) THEN 0.00000000000000000000
            ELSE ((100)::numeric * ("motion_type_summed"."snoozed_motion_pet" / "motion_type_summed"."total_snoozed_motion"))
        END AS "snoozed_motion_pet_percentage",
        CASE
            WHEN ("motion_type_summed"."total_snoozed_motion" = (0)::numeric) THEN 0.00000000000000000000
            ELSE ((100)::numeric * ("motion_type_summed"."snoozed_motion_other" / "motion_type_summed"."total_snoozed_motion"))
        END AS "snoozed_motion_other_percentage",
        CASE
            WHEN ("motion_type_summed"."total_alerted_motion" = (0)::numeric) THEN 0.00000000000000000000
            ELSE ((100)::numeric * ("motion_type_summed"."alerted_motion_person" / "motion_type_summed"."total_alerted_motion"))
        END AS "alerted_motion_person_percentage",
        CASE
            WHEN ("motion_type_summed"."total_alerted_motion" = (0)::numeric) THEN 0.00000000000000000000
            ELSE ((100)::numeric * ("motion_type_summed"."alerted_motion_vehicle" / "motion_type_summed"."total_alerted_motion"))
        END AS "alerted_motion_vehicle_percentage",
        CASE
            WHEN ("motion_type_summed"."total_alerted_motion" = (0)::numeric) THEN 0.00000000000000000000
            ELSE ((100)::numeric * ("motion_type_summed"."alerted_motion_pet" / "motion_type_summed"."total_alerted_motion"))
        END AS "alerted_motion_pet_percentage",
        CASE
            WHEN ("motion_type_summed"."total_alerted_motion" = (0)::numeric) THEN 0.00000000000000000000
            ELSE ((100)::numeric * ("motion_type_summed"."alerted_motion_other" / "motion_type_summed"."total_alerted_motion"))
        END AS "alerted_motion_other_percentage",
        CASE
            WHEN ("motion_type_summed"."total_motion" = (0)::numeric) THEN 0.00000000000000000000
            ELSE ((100)::numeric * ("motion_type_summed"."total_monitored_motion" / "motion_type_summed"."total_motion"))
        END AS "monitored_motion_percentage",
        CASE
            WHEN ("motion_type_summed"."total_motion" = (0)::numeric) THEN 0.00000000000000000000
            ELSE ((100)::numeric * ("motion_type_summed"."total_snoozed_motion" / "motion_type_summed"."total_motion"))
        END AS "snoozed_motion_percentage",
        CASE
            WHEN ("motion_type_summed"."total_motion" = (0)::numeric) THEN 0.00000000000000000000
            ELSE ((100)::numeric * ("motion_type_summed"."total_alerted_motion" / "motion_type_summed"."total_motion"))
        END AS "alerted_motion_percentage"
   FROM "motion_type_summed";
CREATE TABLE IF NOT EXISTS "public"."phone_conversations" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "number" "text" NOT NULL,
    "conversation" "json",
    "location" "text" NOT NULL
);
CREATE TABLE IF NOT EXISTS "public"."policy_snapshot" (
    "id" integer NOT NULL,
    "policies_snapshot" "jsonb" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"()
);
CREATE SEQUENCE IF NOT EXISTS "public"."policy_snapshot_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER SEQUENCE "public"."policy_snapshot_id_seq" OWNED BY "public"."policy_snapshot"."id";

CREATE OR REPLACE VIEW "public"."report_daily_alerted_emails_by_user_id" WITH ("security_invoker"='true') AS
 WITH "report_date" AS (
         SELECT "now"() AS "today",
            ("now"() - '1 day'::interval) AS "yesterday"
        )

    "ea"."id",
    "ea"."created_at",
    "ea"."camera_name",
    "ea"."from_address",
    "ea"."to_address",
    "ea"."subject",
    "ea"."finished_time",
    "ea"."body",
    "ea"."snapshot_path",
    "ea"."motion_type",
    "ea"."read_state",
    "ea"."opened_by",
    "ea"."attachment_type",
    "ea"."opened_at",
    "ea"."monitoring_shift",
    "ea"."email_time",
    "ea"."snooze_id",
    "ea"."location_id",
    "ea"."alert",
    "ea"."alert_cancelled",
    "ea"."description",
    "ea"."alerted_by"
   FROM ((( SELECT "utl_1"."created_at",
            "utl_1"."user_id",
            "utl_1"."location_id"
           FROM "public"."user_to_location" "utl_1"
        UNION
         SELECT "utc"."created_at",
            "utc"."user_id",
            "l"."id" AS "location_id"
           FROM ("public"."user_to_company" "utc"
             LEFT JOIN "public"."locations" "l" ON (("utc"."company_id" = "l"."company_id")))) "utl"
     CROSS JOIN "report_date" "rd")
     LEFT JOIN "public"."emails_alerted" "ea" ON (("ea"."location_id" = "ea"."location_id")))
  WHERE (("ea"."email_time" >= "rd"."yesterday") AND ("ea"."email_time" <= "rd"."today"));
CREATE OR REPLACE VIEW "public"."report_location_camera_checks_view" WITH ("security_invoker"='true') AS
 SELECT "utl"."user_id",
    "cc"."id",
    "cc"."created_at",
    "cc"."camera_name",
    "cc"."camera_uid",
    "cc"."date",
    "cc"."time",
    "cc"."channel_id",
    "cc"."charge_status",
    "cc"."adapter_status",
    "cc"."voltage",
    "cc"."current",
    "cc"."temperature",
    "cc"."battery_percent",
    "cc"."low_power",
    "cc"."battery_version",
    "cc"."pir_status",
    "cc"."cam_index",
    "cc"."camera_status",
    "cc"."snapshot_path",
    "cc"."last_check_uid",
    "cc"."verification_status",
    "cc"."opened_by_uuid",
    "cc"."opened_time",
    "cc"."location_id",
    "cc"."rotation_info",
    "cc"."rotation_description"
   FROM (( SELECT "utl_1"."user_id",
            "utl_1"."location_id"
           FROM "public"."user_to_location" "utl_1"
        UNION
         SELECT "utc"."user_id",
            "l"."id" AS "location_id"
           FROM ("public"."user_to_company" "utc"
             LEFT JOIN "public"."locations" "l" ON (("utc"."company_id" = "l"."company_id")))) "utl"
     JOIN ( SELECT "camera_checks"."id",
            "camera_checks"."created_at",
            "camera_checks"."camera_name",
            "camera_checks"."camera_uid",
            "camera_checks"."date",
            "camera_checks"."time",
            "camera_checks"."channel_id",
            "camera_checks"."charge_status",
            "camera_checks"."adapter_status",
            "camera_checks"."voltage",
            "camera_checks"."current",
            "camera_checks"."temperature",
            "camera_checks"."battery_percent",
            "camera_checks"."low_power",
            "camera_checks"."battery_version",
            "camera_checks"."pir_status",
            "camera_checks"."cam_index",
            "camera_checks"."camera_status",
            "camera_checks"."snapshot_path",
            "camera_checks"."last_check_uid",
            "camera_checks"."verification_status",
            "camera_checks"."opened_by_uuid",
            "camera_checks"."opened_time",
            "camera_checks"."location_id",
            "camera_checks"."rotation_info",
            "camera_checks"."rotation_description"
           FROM "public"."camera_checks"
          WHERE ("camera_checks"."time" ~~ '06%'::"text")) "cc" ON (("cc"."location_id" = "utl"."location_id")))
  WHERE ("utl"."user_id" = "auth"."uid"());
CREATE OR REPLACE VIEW "public"."report_locations_all_latest_view" WITH ("security_invoker"='true') AS
 WITH "user_locations" AS (
         SELECT "user_to_location"."user_id",
            "user_to_location"."location_id"
           FROM "public"."user_to_location"
        UNION
         SELECT "utc"."user_id",
            "l_1"."id"
           FROM ("public"."user_to_company" "utc"
             JOIN "public"."locations" "l_1" ON (("utc"."company_id" = "l_1"."company_id")))
        ), "latest_reports" AS (
         SELECT "lr_1"."id",
            "lr_1"."location_id",
            "lr_1"."snoozed_motion",
            "lr_1"."monitored_motion",
            "lr_1"."to_date",
            "lr_1"."created_at",
            "lr_1"."location_name",
            "lr_1"."alerted_motion",
            "lr_1"."from_date",
            "lr_1"."time",
            "lr_1"."camera_count",
            "lr_1"."from_date_timestamp",
            "lr_1"."to_date_timestamp",
            "lr_1"."rn"
           FROM ( SELECT "location_reports"."id",
                    "location_reports"."location_id",
                    "location_reports"."snoozed_motion",
                    "location_reports"."monitored_motion",
                    "location_reports"."to_date",
                    "location_reports"."created_at",
                    "location_reports"."location_name",
                    "location_reports"."alerted_motion",
                    "location_reports"."from_date",
                    "location_reports"."time",
                    "location_reports"."camera_count",
                    "location_reports"."from_date_timestamp",
                    "location_reports"."to_date_timestamp",
                    "row_number"() OVER (PARTITION BY "location_reports"."location_id" ORDER BY "location_reports"."time" DESC) AS "rn"
                   FROM "public"."location_reports"
                  WHERE ("location_reports"."to_date" = CURRENT_DATE)) "lr_1"
          WHERE ("lr_1"."rn" = 1)
        )
 SELECT "lr"."id",
    "lr"."location_id",
    "lr"."snoozed_motion",
    "lr"."monitored_motion",
    "lr"."to_date",
    "lr"."created_at",
    "lr"."location_name",
    "lr"."alerted_motion",
    "lr"."from_date",
    "lr"."time",
    "lr"."camera_count",
    "lr"."from_date_timestamp",
    "lr"."to_date_timestamp",
    "lr"."rn",
    "ul"."user_id",
    "u"."email"
   FROM ((("latest_reports" "lr"
     JOIN "user_locations" "ul" ON (("lr"."location_id" = "ul"."location_id")))
     LEFT JOIN "public"."users" "u" ON (("ul"."user_id" = "u"."id")))
     LEFT JOIN "public"."locations" "l" ON (("lr"."location_id" = "l"."id")))
  ORDER BY "lr"."to_date" DESC, "lr"."time" DESC, "lr"."location_name", "u"."email" DESC;
CREATE OR REPLACE VIEW "public"."report_locations_all_view" AS
SELECT
    NULL::bigint AS "id",
    NULL::bigint AS "location_id",
    NULL::integer AS "snoozed_motion",
    NULL::integer AS "monitored_motion",
    NULL::"date" AS "to_date",
    NULL::timestamp with time zone AS "created_at",
    NULL::"text" AS "location_name",
    NULL::integer AS "alerted_motion",
    NULL::"date" AS "from_date",
    NULL::time without time zone AS "time",
    NULL::smallint AS "camera_count",
    NULL::timestamp with time zone AS "from_date_timestamp",
    NULL::timestamp with time zone AS "to_date_timestamp",
    NULL::"uuid" AS "user_id";
CREATE OR REPLACE VIEW "public"."report_locations_view" WITH ("security_invoker"='true') AS
 SELECT DISTINCT "lr"."id",
    "lr"."location_id",
    "lr"."snoozed_motion",
    "lr"."monitored_motion",
    "lr"."to_date",
    "lr"."created_at",
    "lr"."location_name",
    "lr"."alerted_motion",
    "lr"."from_date",
    "lr"."time",
    "lr"."camera_count",
    "lr"."from_date_timestamp",
    "lr"."to_date_timestamp",
    "utl"."user_id",
    "u"."email"
   FROM ((("public"."location_reports" "lr"
     JOIN ( SELECT "utl_1"."created_at",
            "utl_1"."user_id",
            "utl_1"."location_id"
           FROM "public"."user_to_location" "utl_1"
        UNION
         SELECT "utc"."created_at",
            "utc"."user_id",
            "l"."id" AS "location_id"
           FROM ("public"."user_to_company" "utc"
             JOIN "public"."locations" "l" ON (("utc"."company_id" = "l"."company_id")))) "utl" ON (("utl"."location_id" = "lr"."location_id")))
     LEFT JOIN "public"."users" "u" ON (("utl"."user_id" = "u"."id")))
     LEFT JOIN ( SELECT "location_reports"."location_id",
            "location_reports"."to_date",
            "max"("location_reports"."time") AS "max_time"
           FROM "public"."location_reports"
          GROUP BY "location_reports"."location_id", "location_reports"."to_date") "max_time" ON ((("lr"."location_id" = "max_time"."location_id") AND ("lr"."to_date" = "max_time"."to_date") AND ("lr"."time" = "max_time"."max_time"))))
  WHERE ("utl"."user_id" = "auth"."uid"())
  ORDER BY "lr"."to_date" DESC, "lr"."time" DESC, "u"."email" DESC;
CREATE OR REPLACE VIEW "public"."report_snoozed_emails_view" WITH ("security_invoker"='true') AS
 SELECT "lr"."id" AS "location_report_id",
    "e"."id",
    "e"."created_at",
    "e"."camera_name",
    "e"."from_address",
    "e"."to_address",
    "e"."subject",
    "e"."finished_time",
    "e"."body",
    "e"."snapshot_path",
    "e"."motion_type",
    "e"."read_state",
    "e"."opened_by",
    "e"."attachment_type",
    "e"."opened_at",
    "e"."monitoring_shift",
    "e"."email_time",
    "e"."snooze_id",
    "e"."location_id",
    "e"."alert",
    "e"."alert_cancelled"
   FROM ("public"."location_reports" "lr"
     JOIN "public"."emails" "e" ON ((("e"."location_id" = "lr"."location_id") AND (("e"."email_time" >= "lr"."from_date_timestamp") AND ("e"."email_time" <= "lr"."to_date_timestamp")) AND ("e"."snooze_id" IS NOT NULL))))
  ORDER BY "lr"."id" DESC, "e"."created_at" DESC;
CREATE TABLE IF NOT EXISTS "public"."roles" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "role" "text" NOT NULL,
    "value" bigint NOT NULL
);
ALTER TABLE "public"."roles" ALTER COLUMN "value" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."roles_value_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."roles_view" WITH ("security_invoker"='true') AS
 SELECT "r"."id",
    "r"."created_at",
    "r"."role"
   FROM "public"."roles" "r";
ALTER TABLE "public"."camera_script_start_times_automated" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."script_start_times_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE "public"."sim_card_provider" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."sim_card_provider_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE "public"."sim_cards" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."sim_cards_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."sim_cards_view" WITH ("security_invoker"='true') AS
 SELECT "sc"."id",
    "sc"."iccid",
    "sc"."imei",
    "sc"."provider",
    "scp"."logo",
    (("sc"."iccid" || ' : '::"text") || "sc"."imei") AS "iccid_imei"
   FROM ("public"."sim_cards" "sc"
     LEFT JOIN "public"."sim_card_provider" "scp" ON (("sc"."provider" = "scp"."name")));
CREATE TABLE IF NOT EXISTS "public"."snooze_report" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "snooze_id" bigint,
    "snooze_end_process" timestamp without time zone,
    "claude_text_gen" "text",
    "first_img" "text",
    "last_img" "text"
);
ALTER TABLE "public"."snooze_report" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."snooze_report_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."snooze_report_img" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "snooze_id" bigint,
    "img_path" "text",
    "id_person" "text"
);
ALTER TABLE "public"."snooze_report_img" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."snooze_report_img_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."snooze_report_view" WITH ("security_invoker"='true') AS
 SELECT "la"."id",
    "la"."location_name",
    "la"."end_timestamp",
    "la"."current_time",
    "la"."location_id",
    "la"."created_at" AS "start_timestamp",
    "sr"."snooze_id",
    "sr"."snooze_end_process",
    "sr"."claude_text_gen",
    "sr"."first_img",
    "sr"."last_img",

    "la"."user_id" AS "snoozed_by_user_id",
    "u"."username" AS "snoozed_by_username",
    "u"."email" AS "snoozed_by_email",
    "u"."phone" AS "snoozed_by_phone"
   FROM ((("public"."location_activities" "la"
     RIGHT JOIN "public"."snooze_report" "sr" ON (("la"."id" = "sr"."snooze_id")))
     LEFT JOIN ( SELECT "user_to_location"."user_id",
            "user_to_location"."location_id"
           FROM "public"."user_to_location"
        UNION
         SELECT "utc"."user_id",
            "l"."id" AS "location_id"
           FROM ("public"."user_to_company" "utc"
             JOIN "public"."locations" "l" ON (("utc"."company_id" = "l"."company_id")))) "ul" ON (("la"."location_id" = "ul"."location_id")))
     LEFT JOIN "public"."users" "u" ON (("la"."user_id" = "u"."id")));
CREATE TABLE IF NOT EXISTS "public"."temporary_location_access" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "location_id" bigint,
    "user_id" "uuid",
    "start_time" time with time zone,
    "end_time" time with time zone
);
ALTER TABLE "public"."temporary_location_access" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."temporary_location_access_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."test" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text"
);
CREATE TABLE IF NOT EXISTS "public"."test2" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "age" "text"
);
ALTER TABLE "public"."test2" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."test2_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."testPush" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "nume" "text",
    "onesig" "text"
);
ALTER TABLE "public"."testPush" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."testPush_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE "public"."test" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."test_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."todays_alerted_emails_for_monitor" WITH ("security_invoker"='true') AS
 WITH "timespan" AS (
         SELECT "now"() AS "today",
            ("now"() - '1 day'::interval) AS "yesterday"
        )
 SELECT "e"."id",
    "e"."created_at",
    "e"."camera_name",
    "e"."from_address",
    "e"."to_address",
    "e"."subject",
    "e"."finished_time",
    "e"."body",
    "e"."snapshot_path",
    "e"."motion_type",
    "e"."read_state",
    "e"."opened_by",
    "e"."attachment_type",
    "e"."opened_at",
    "e"."monitoring_shift",
    "e"."email_time",
    "e"."snooze_id",
    "e"."location_id",
    "e"."alert",
    "e"."alert_cancelled",
    "e"."description",
    "e"."alerted_by",
    "ts"."today",
    "ts"."yesterday"
   FROM ("public"."emails_alerted" "e"
     CROSS JOIN "timespan" "ts")
  WHERE (("e"."alert" = true) AND ("e"."alert_cancelled" = false) AND (("e"."email_time" >= "ts"."yesterday") AND ("e"."email_time" <= "ts"."today")) AND (("e"."opened_by" = "auth"."uid"()) OR ("e"."alerted_by" = "auth"."uid"())))
  ORDER BY "e"."created_at" DESC;
ALTER TABLE "public"."user_to_company" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."use_to_company_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."user_companies_view" WITH ("security_invoker"='true') AS
 SELECT "utc"."user_id",
    "c"."id",
    "c"."created_at",
    "c"."name",
    "c"."type",
    "c"."CUI",
    "c"."phone_number",
    "c"."email",
    "c"."registrul_comertului",
    "c"."address",
    "c"."image",
    "cct"."type" AS "custom_type"
   FROM (("public"."user_to_company" "utc"
     JOIN "public"."companies" "c" ON (("utc"."company_id" = "c"."id")))
     FULL JOIN "public"."custom_company_types" "cct" ON (("cct"."company_id" = "c"."id")))
  ORDER BY "c"."name";
CREATE OR REPLACE VIEW "public"."user_count_view" WITH ("security_invoker"='true') AS
 SELECT "count"("u"."id") AS "count"
   FROM "public"."users" "u";
CREATE TABLE IF NOT EXISTS "public"."user_to_bucket_files" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name_file" "text",
    "analyse_directory" "text",
    "filename" "text",
    "analyse_id" bigint,
    "download_users" "text"[],
    "delete_users" "uuid"
);
CREATE OR REPLACE VIEW "public"."user_files_view" WITH ("security_invoker"='true') AS
 SELECT "u"."id" AS "user_id",
    "u"."username",
    "b"."filename",
    "b"."analyse_directory",
    "b"."id" AS "user_to_bucket_id",
    "b"."delete_users" AS "delete_user",
    "u2"."username" AS "delete_username"
   FROM ((("public"."user_to_bucket_files" "b"
     LEFT JOIN LATERAL "unnest"(("b"."download_users")::"uuid"[]) "user_id"("user_id") ON (true))
     LEFT JOIN "public"."users" "u" ON (("u"."id" = "user_id"."user_id")))
     LEFT JOIN "public"."users" "u2" ON (("u2"."id" = "b"."delete_users")))
  WHERE (("b"."download_users" IS NOT NULL) OR ("b"."delete_users" IS NOT NULL));
CREATE TABLE IF NOT EXISTS "public"."user_images" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "profile_image" "text",
    "user_id" "uuid" NOT NULL
);
CREATE OR REPLACE VIEW "public"."user_locations_view" AS
SELECT
    NULL::"uuid" AS "user_id",
    NULL::bigint AS "temp_code",
    NULL::bigint AS "id",
    NULL::character varying(50) AS "name",
    NULL::"text" AS "image",
    NULL::boolean AS "warranty",
    NULL::boolean AS "intervention",
    NULL::boolean AS "monitoring",
    NULL::boolean AS "solar",
    NULL::boolean AS "mobile_internet",
    NULL::"text" AS "installer",
    NULL::"text" AS "coordinates",
    NULL::"text" AS "maintenence",
    NULL::"text" AS "address",
    NULL::bigint AS "company_id",
    NULL::bigint AS "camera_count",
    NULL::"text" AS "company_name";
ALTER TABLE "public"."roles" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_roles_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE "public"."user_roles" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_roles_id_seq1"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE "public"."user_to_bucket_files" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_to_bucket_files_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE "public"."user_to_camera" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_to_camera_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE "public"."user_to_location" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_to_location_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."video_analysis" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "upload_directory" "text",
    "person_id" "text",
    "video" "text",
    "thumbnail" "text",
    "steps" "text",
    "txt_path" "text",
    "analyse_directory" "text",
    "analyse_id" bigint,
    "download_thumbnail" "text"[],
    "delete_users" "uuid",
    "download_video" "text"[],
    "download_txt" "text"[],
    "users_views" "text"[]
);
ALTER TABLE "public"."video_analysis" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."video_analysis_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."location_schedule" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."location_schedule_id_seq"'::"regclass");

ALTER TABLE ONLY "public"."policy_snapshot" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."policy_snapshot_id_seq"'::"regclass");

ALTER TABLE ONLY "public"."GDPR"
    ADD CONSTRAINT "GDPR_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."analysis"
    ADD CONSTRAINT "analysis_analyse_directory_key" UNIQUE ("analyse_directory");

ALTER TABLE ONLY "public"."analysis"
    ADD CONSTRAINT "analysis_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."call_history"
    ADD CONSTRAINT "call_history_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."camera_checks"
    ADD CONSTRAINT "camera_checks_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."camera_models"
    ADD CONSTRAINT "camera_models_model_key" UNIQUE ("model");

ALTER TABLE ONLY "public"."camera_models"
    ADD CONSTRAINT "camera_models_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."camera_nvr_channels"
    ADD CONSTRAINT "camera_nvr_channels_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."camera_placement_images"
    ADD CONSTRAINT "camera_placement_images_pkey" PRIMARY KEY ("camera_id");

ALTER TABLE ONLY "public"."camera_script_start_times_manual_client"
    ADD CONSTRAINT "camera_script_start_times_manual_client_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."camera_script_start_times_manual"
    ADD CONSTRAINT "camera_script_start_times_manual_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."camera_statistics"
    ADD CONSTRAINT "camera_statistics_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."cameras_in_toml"
    ADD CONSTRAINT "cameras_in_toml_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."cameras"
    ADD CONSTRAINT "cameras_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."companies"
    ADD CONSTRAINT "companies_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."company_activity_report_notifications"
    ADD CONSTRAINT "company_activity_report_notifications_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."company_activity_reports"
    ADD CONSTRAINT "company_activity_reports_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."company_types"
    ADD CONSTRAINT "company_types_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."company_types"
    ADD CONSTRAINT "company_types_type_key" UNIQUE ("type");

ALTER TABLE ONLY "public"."custom_company_types"
    ADD CONSTRAINT "custom_company_types_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."email_ai_attachments"
    ADD CONSTRAINT "email_ai_attachments_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."email_attachments"
    ADD CONSTRAINT "email_attachments_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."emails_ai"
    ADD CONSTRAINT "emails_ai_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."emails_alerted"
    ADD CONSTRAINT "emails_alerted_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."emails"
    ADD CONSTRAINT "emails_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."links"
    ADD CONSTRAINT "links_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."location_activities"
    ADD CONSTRAINT "location_activities_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."location_code_share"
    ADD CONSTRAINT "location_code_share_code_key" UNIQUE ("code");

ALTER TABLE ONLY "public"."location_code_share"
    ADD CONSTRAINT "location_code_share_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."location_intervention"
    ADD CONSTRAINT "location_intervention_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."location_reports"
    ADD CONSTRAINT "location_reports_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."location_schedule"
    ADD CONSTRAINT "location_schedule_location_id_key" UNIQUE ("location_id");

ALTER TABLE ONLY "public"."location_schedule"
    ADD CONSTRAINT "location_schedule_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."location_to_camera"
    ADD CONSTRAINT "location_to_camera_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."locations"
    ADD CONSTRAINT "locations_name_key" UNIQUE ("name");

ALTER TABLE ONLY "public"."locations"
    ADD CONSTRAINT "locations_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."monitoring_call_order"
    ADD CONSTRAINT "monitoring_phone_order_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."monitoring_timetable"
    ADD CONSTRAINT "monitoring_timetable_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."motion_data_hourly"
    ADD CONSTRAINT "motion_data_analysis_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."phone_conversations"
    ADD CONSTRAINT "phone_conversations_pkey" PRIMARY KEY ("number", "location");

ALTER TABLE ONLY "public"."policy_snapshot"
    ADD CONSTRAINT "policy_snapshot_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."roles"
    ADD CONSTRAINT "roles_value_key" UNIQUE ("value");

ALTER TABLE ONLY "public"."camera_script_start_times_automated"
    ADD CONSTRAINT "script_start_times_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."sim_card_provider"
    ADD CONSTRAINT "sim_card_provider_name_key" UNIQUE ("name");

ALTER TABLE ONLY "public"."sim_card_provider"
    ADD CONSTRAINT "sim_card_provider_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."sim_cards"
    ADD CONSTRAINT "sim_cards_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."sim_cards"
    ADD CONSTRAINT "sim_cards_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."snooze_report_img"
    ADD CONSTRAINT "snooze_report_img_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."snooze_report"
    ADD CONSTRAINT "snooze_report_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."snooze_report"
    ADD CONSTRAINT "snooze_report_snooze_id_key" UNIQUE ("snooze_id");

ALTER TABLE ONLY "public"."temporary_location_access"
    ADD CONSTRAINT "temporary_location_access_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."test2"
    ADD CONSTRAINT "test2_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."testPush"
    ADD CONSTRAINT "testPush_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."test"
    ADD CONSTRAINT "test_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_to_company"
    ADD CONSTRAINT "use_to_company_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_images"
    ADD CONSTRAINT "user_images_pkey" PRIMARY KEY ("user_id");

ALTER TABLE ONLY "public"."user_images"
    ADD CONSTRAINT "user_images_user_id_key" UNIQUE ("user_id");

ALTER TABLE ONLY "public"."user_to_location"
    ADD CONSTRAINT "user_location_unique" UNIQUE ("user_id", "location_id");

ALTER TABLE ONLY "public"."roles"
    ADD CONSTRAINT "user_roles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "user_roles_pkey1" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."roles"
    ADD CONSTRAINT "user_roles_role_key" UNIQUE ("role");

ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "user_roles_user_id_role_key" UNIQUE ("user_id", "role");

ALTER TABLE ONLY "public"."user_to_bucket_files"
    ADD CONSTRAINT "user_to_bucket_files_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_to_camera"
    ADD CONSTRAINT "user_to_camera_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_to_location"
    ADD CONSTRAINT "user_to_location_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_user_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."video_analysis"
    ADD CONSTRAINT "video_analysis_pkey" PRIMARY KEY ("id");

CREATE INDEX "emails_ai_location_id_idx" ON "public"."emails_ai" USING "btree" ("location_id");

CREATE INDEX "emails_ai_snooze_id_idx" ON "public"."emails_ai" USING "btree" ("snooze_id");

CREATE INDEX "emails_alerted_location_id_idx" ON "public"."emails_alerted" USING "btree" ("location_id");

CREATE INDEX "emails_alerted_snooze_id_idx" ON "public"."emails_alerted" USING "btree" ("snooze_id");

CREATE INDEX "idx_emails_alerted_email_time" ON "public"."emails_alerted" USING "btree" ("email_time");

CREATE INDEX "idx_emails_alerted_location_id" ON "public"."emails_alerted" USING "btree" ("location_id");

CREATE INDEX "idx_emails_location_id" ON "public"."emails" USING "btree" ("location_id");

CREATE INDEX "idx_emails_snooze_id" ON "public"."emails" USING "btree" ("snooze_id");

CREATE INDEX "idx_location_reports_location_id" ON "public"."location_reports" USING "btree" ("location_id");

CREATE OR REPLACE VIEW "public"."company_activity_reports_view" WITH ("security_invoker"='true') AS
 SELECT "car"."id",
    "car"."created_at",
    "car"."company_id",
    "car"."company_name",
    "car"."title",
    "car"."description",
    "car"."from_date",
    "car"."to_date",
    "count"("carn"."id") AS "count"
   FROM ("public"."company_activity_reports" "car"
     JOIN "public"."company_activity_report_notifications" "carn" ON (("car"."id" = "carn"."report_id")))
  GROUP BY "car"."id";

CREATE OR REPLACE VIEW "public"."report_locations_all_view" WITH ("security_invoker"='true') AS
 SELECT "lr"."id",
    "lr"."location_id",
    "lr"."snoozed_motion",
    "lr"."monitored_motion",
    "lr"."to_date",
    "lr"."created_at",
    "lr"."location_name",
    "lr"."alerted_motion",
    "lr"."from_date",
    "lr"."time",
    "lr"."camera_count",
    "lr"."from_date_timestamp",
    "lr"."to_date_timestamp",
    "utl"."user_id"
   FROM ("public"."location_reports" "lr"
     LEFT JOIN "public"."user_to_location" "utl" ON (("utl"."location_id" = "lr"."location_id")))
  GROUP BY "lr"."id", "utl"."user_id"
  ORDER BY "lr"."to_date" DESC;

CREATE OR REPLACE VIEW "public"."company_activity_reports_latest_view" WITH ("security_invoker"='true') AS
 WITH "timespan" AS (
         SELECT "now"() AS "today",
            ("now"() - '1 day'::interval) AS "yesterday"
        )
 SELECT "car"."id",
    "car"."created_at",
    "car"."company_id",
    "car"."company_name",
    "car"."title",
    "car"."description",
    "car"."from_date",
    "car"."to_date",
    "count"("carn"."id") AS "count"
   FROM (("public"."company_activity_reports" "car"
     CROSS JOIN "timespan" "ts")
     JOIN "public"."company_activity_report_notifications" "carn" ON (("car"."id" = "carn"."report_id")))
  WHERE (("car"."created_at" >= "ts"."yesterday") AND ("car"."created_at" <= "ts"."today"))
  GROUP BY "car"."id";

CREATE OR REPLACE VIEW "public"."locations_view" WITH ("security_invoker"='true') AS
 SELECT DISTINCT "l"."id",
    "l"."name",
    "l"."image",
    "l"."warranty",
    "l"."intervention",
    "l"."monitoring",
    "l"."solar",
    "l"."mobile_internet",
    "l"."installer",
    "l"."coordinates",
    "l"."maintenence",
    "l"."address",
    "l"."company_id",
    "count"(DISTINCT "ltc"."camera_id") AS "camera_count",
    "count"(DISTINCT "utl"."user_id") AS "user_count",
    "c"."name" AS "company_name"
   FROM ((("public"."locations" "l"
     LEFT JOIN "public"."location_to_camera" "ltc" ON (("ltc"."location_id" = "l"."id")))
     LEFT JOIN "public"."user_to_location" "utl" ON (("utl"."location_id" = "l"."id")))
     LEFT JOIN "public"."companies" "c" ON (("c"."id" = "l"."company_id")))
  GROUP BY "l"."id", "c"."name";

CREATE OR REPLACE VIEW "public"."user_locations_view" WITH ("security_invoker"='true') AS
 SELECT "utl"."user_id",
    "utl"."temp_code",
    "l"."id",
    "l"."name",
    "l"."image",
    "l"."warranty",
    "l"."intervention",
    "l"."monitoring",
    "l"."solar",
    "l"."mobile_internet",
    "l"."installer",
    "l"."coordinates",
    "l"."maintenence",
    "l"."address",
    "l"."company_id",
    "count"("ltc"."camera_id") AS "camera_count",
    "c"."name" AS "company_name"
   FROM ((("public"."user_to_location" "utl"
     JOIN "public"."locations" "l" ON (("utl"."location_id" = "l"."id")))
     LEFT JOIN "public"."location_to_camera" "ltc" ON (("ltc"."location_id" = "utl"."location_id")))
     LEFT JOIN "public"."companies" "c" ON (("c"."id" = "l"."company_id")))
  GROUP BY "utl"."user_id", "utl"."temp_code", "l"."id", "c"."name"
UNION
 SELECT "utc"."user_id",
    NULL::bigint AS "temp_code",
    "l"."id",
    "l"."name",
    "l"."image",
    "l"."warranty",
    "l"."intervention",
    "l"."monitoring",
    "l"."solar",
    "l"."mobile_internet",
    "l"."installer",
    "l"."coordinates",
    "l"."maintenence",
    "l"."address",
    "l"."company_id",
    "count"("ltc"."camera_id") AS "camera_count",
    "c"."name" AS "company_name"
   FROM ((("public"."user_to_company" "utc"
     JOIN "public"."locations" "l" ON (("utc"."company_id" = "l"."company_id")))
     LEFT JOIN "public"."location_to_camera" "ltc" ON (("ltc"."location_id" = "l"."id")))
     LEFT JOIN "public"."companies" "c" ON (("c"."id" = "l"."company_id")))
  GROUP BY "utc"."user_id", "l"."id", "c"."name"
  ORDER BY 1 DESC, 4;

CREATE OR REPLACE VIEW "public"."company_locations_view" WITH ("security_invoker"='true') AS
 SELECT "l"."id",
    "l"."name",
    "l"."image",
    "l"."warranty",
    "l"."intervention",
    "l"."monitoring",
    "l"."solar",
    "l"."mobile_internet",
    "l"."installer",
    "l"."coordinates",
    "l"."maintenence",
    "l"."address",
    "l"."company_id",
    "count"(DISTINCT "ltc"."camera_id") AS "camera_count",
    "count"(DISTINCT "utl"."user_id") AS "user_count",
    "c"."name" AS "company_name"
   FROM ((("public"."locations" "l"
     LEFT JOIN "public"."location_to_camera" "ltc" ON (("ltc"."location_id" = "l"."id")))
     LEFT JOIN "public"."user_to_location" "utl" ON (("utl"."location_id" = "l"."id")))
     LEFT JOIN "public"."companies" "c" ON (("c"."id" = "l"."company_id")))
  GROUP BY "l"."id", "c"."name";

CREATE OR REPLACE VIEW "public"."users_view" WITH ("security_invoker"='true') AS
 SELECT "u"."id",
    "u"."created_at",
    "u"."username",
    "u"."email",
    "u"."phone",
    "u"."onesignal_subscription_id",
    "u"."profile_image",
    "u"."company_key_name",
    "u"."subscribed",
    "u"."is_intervention",
    "ur"."role",
    "count"(DISTINCT "utl"."location_id") AS "location_count",
    "count"(DISTINCT "utc"."camera_id") AS "camera_count",
    "count"(DISTINCT "utco"."company_id") AS "company_count"
   FROM (((("public"."users" "u"
     LEFT JOIN "public"."user_roles" "ur" ON (("ur"."user_id" = "u"."id")))
     LEFT JOIN "public"."user_to_location" "utl" ON (("utl"."user_id" = "u"."id")))
     LEFT JOIN "public"."user_to_camera" "utc" ON (("utc"."user_id" = "u"."id")))
     LEFT JOIN "public"."user_to_company" "utco" ON (("utco"."user_id" = "u"."id")))
  GROUP BY "u"."id", "ur"."role"
  ORDER BY "u"."username", "u"."email";

ALTER TABLE ONLY "public"."call_history"
    ADD CONSTRAINT "call_history_caller_id_fkey" FOREIGN KEY ("caller_id") REFERENCES "public"."users"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."call_history"
    ADD CONSTRAINT "call_history_receiver_id_fkey" FOREIGN KEY ("receiver_id") REFERENCES "public"."users"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."camera_nvr_channels"
    ADD CONSTRAINT "camera_nvr_channels_nvr_uid_fkey" FOREIGN KEY ("nvr_uid") REFERENCES "public"."cameras"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."camera_script_start_times_manual_client"
    ADD CONSTRAINT "camera_script_start_times_manual_client_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id");

ALTER TABLE ONLY "public"."camera_script_start_times_manual"
    ADD CONSTRAINT "camera_script_start_times_manual_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id");

ALTER TABLE ONLY "public"."cameras_in_toml"
    ADD CONSTRAINT "cameras_in_toml_cam_uid_fkey" FOREIGN KEY ("id") REFERENCES "public"."cameras"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."cameras"
    ADD CONSTRAINT "cameras_sim_card_id_fkey" FOREIGN KEY ("sim_card_id") REFERENCES "public"."sim_cards"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."company_activity_report_notifications"
    ADD CONSTRAINT "company_activity_report_notifications_location_id_fkey" FOREIGN KEY ("location_id") REFERENCES "public"."locations"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."company_activity_report_notifications"
    ADD CONSTRAINT "company_activity_report_notifications_report_id_fkey" FOREIGN KEY ("report_id") REFERENCES "public"."company_activity_reports"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."company_activity_reports"
    ADD CONSTRAINT "company_activity_reports_company_id_fkey" FOREIGN KEY ("company_id") REFERENCES "public"."companies"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."email_ai_attachments"
    ADD CONSTRAINT "email_ai_attachments_email_id_fkey" FOREIGN KEY ("email_id") REFERENCES "public"."emails_ai"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."emails_ai"
    ADD CONSTRAINT "emails_ai_opened_by_fkey" FOREIGN KEY ("opened_by") REFERENCES "public"."users"("id") ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE ONLY "public"."emails_alerted"
    ADD CONSTRAINT "emails_alerted_opened_by_fkey" FOREIGN KEY ("opened_by") REFERENCES "public"."users"("id") ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE ONLY "public"."location_code_share"
    ADD CONSTRAINT "location_code_share_location_id_fkey" FOREIGN KEY ("location_id") REFERENCES "public"."locations"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."location_intervention"
    ADD CONSTRAINT "location_intervention_location_id_fkey" FOREIGN KEY ("location_id") REFERENCES "public"."locations"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."location_intervention"
    ADD CONSTRAINT "location_intervention_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."location_schedule"
    ADD CONSTRAINT "location_schedule_location_id_fkey" FOREIGN KEY ("location_id") REFERENCES "public"."locations"("id");

ALTER TABLE ONLY "public"."locations"
    ADD CONSTRAINT "locations_company_id_fkey" FOREIGN KEY ("company_id") REFERENCES "public"."companies"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."monitoring_call_order"
    ADD CONSTRAINT "monitoring_phone_order_location_id_fkey" FOREIGN KEY ("location_id") REFERENCES "public"."locations"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."monitoring_call_order"
    ADD CONSTRAINT "monitoring_phone_order_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."custom_company_types"
    ADD CONSTRAINT "public_custom_company_types_company_id_fkey" FOREIGN KEY ("company_id") REFERENCES "public"."companies"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."email_attachments"
    ADD CONSTRAINT "public_email_attachments_email_id_fkey" FOREIGN KEY ("email_id") REFERENCES "public"."emails"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."emails"
    ADD CONSTRAINT "public_emails_opened_by_fkey" FOREIGN KEY ("opened_by") REFERENCES "public"."users"("id") ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE ONLY "public"."location_activities"
    ADD CONSTRAINT "public_location_activities_location_id_fkey" FOREIGN KEY ("location_id") REFERENCES "public"."locations"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."location_activities"
    ADD CONSTRAINT "public_location_activities_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE ONLY "public"."location_to_camera"
    ADD CONSTRAINT "public_location_to_camera_camera_id_fkey" FOREIGN KEY ("camera_id") REFERENCES "public"."cameras"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."location_to_camera"
    ADD CONSTRAINT "public_location_to_camera_location_id_fkey" FOREIGN KEY ("location_id") REFERENCES "public"."locations"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_to_company"
    ADD CONSTRAINT "public_use_to_company_company_id_fkey" FOREIGN KEY ("company_id") REFERENCES "public"."companies"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_to_company"
    ADD CONSTRAINT "public_use_to_company_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "public_user_roles_role_fkey" FOREIGN KEY ("role") REFERENCES "public"."roles"("role") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_to_camera"
    ADD CONSTRAINT "public_user_to_camera_camera_id_fkey" FOREIGN KEY ("camera_id") REFERENCES "public"."cameras"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_to_camera"
    ADD CONSTRAINT "public_user_to_camera_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_to_location"
    ADD CONSTRAINT "public_user_to_location_location_id_fkey" FOREIGN KEY ("location_id") REFERENCES "public"."locations"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_to_location"
    ADD CONSTRAINT "public_user_to_location_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "public_users_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."sim_cards"
    ADD CONSTRAINT "sim_cards_provider_fkey" FOREIGN KEY ("provider") REFERENCES "public"."sim_card_provider"("name") ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE ONLY "public"."snooze_report_img"
    ADD CONSTRAINT "snooze_report_img_snooze_id_fkey" FOREIGN KEY ("snooze_id") REFERENCES "public"."snooze_report"("snooze_id");

ALTER TABLE ONLY "public"."snooze_report"
    ADD CONSTRAINT "snooze_report_snooze_id_fkey" FOREIGN KEY ("snooze_id") REFERENCES "public"."location_activities"("id");

ALTER TABLE ONLY "public"."temporary_location_access"
    ADD CONSTRAINT "temporary_location_access_location_id_fkey" FOREIGN KEY ("location_id") REFERENCES "public"."locations"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."temporary_location_access"
    ADD CONSTRAINT "temporary_location_access_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "user_roles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_to_bucket_files"
    ADD CONSTRAINT "user_to_bucket_files_analyse_id_fkey" FOREIGN KEY ("analyse_id") REFERENCES "public"."analysis"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."user_to_location"
    ADD CONSTRAINT "user_to_location_temp_code_fkey" FOREIGN KEY ("temp_code") REFERENCES "public"."location_code_share"("code") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."video_analysis"
    ADD CONSTRAINT "video_analysis_analyse_directory_fkey" FOREIGN KEY ("analyse_directory") REFERENCES "public"."analysis"("analyse_directory") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."video_analysis"
    ADD CONSTRAINT "video_analysis_analyse_id_fkey" FOREIGN KEY ("analyse_id") REFERENCES "public"."analysis"("id") ON DELETE SET NULL;

CREATE POLICY "Allow all" ON "public"."email_attachments" TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow all" ON "public"."emails_ai" TO "authenticated", "anon" USING (true);

CREATE POLICY "Allow all" ON "public"."monitoring_timetable" TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow all" ON "public"."roles" TO "authenticated" USING (true);

CREATE POLICY "Allow all" ON "public"."sim_card_provider" TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow all" ON "public"."sim_cards" TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow all" ON "public"."user_images" TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow all" ON "public"."user_to_camera" TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow alll" ON "public"."email_ai_attachments" TO "authenticated", "anon" USING (true);

CREATE POLICY "Allow anon" ON "public"."locations" FOR SELECT TO "anon" USING (true);

CREATE POLICY "Allow anon key user for update" ON "public"."emails" FOR UPDATE TO "authenticated", "anon" USING (true);

CREATE POLICY "Allow anon select" ON "public"."emails_alerted" FOR SELECT TO "anon" USING (true);

CREATE POLICY "Allow anon select" ON "public"."location_reports" FOR SELECT TO "anon" USING (true);

CREATE POLICY "Allow auth admin to read user roles" ON "public"."roles" FOR SELECT TO "supabase_auth_admin" USING (true);

CREATE POLICY "Allow auth admin to read user roles" ON "public"."user_roles" FOR SELECT TO "supabase_auth_admin" USING (true);

CREATE POLICY "Allow delete" ON "public"."camera_models" FOR DELETE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow delete" ON "public"."camera_nvr_channels" FOR DELETE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow delete" ON "public"."cameras" FOR DELETE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow delete" ON "public"."companies" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow delete" ON "public"."location_to_camera" FOR DELETE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow delete" ON "public"."locations" FOR DELETE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow delete" ON "public"."monitoring_call_order" FOR DELETE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow delete" ON "public"."sim_cards" FOR DELETE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'tehnic'::"text"])));

CREATE POLICY "Allow delete" ON "public"."user_images" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Allow delete" ON "public"."user_to_camera" FOR DELETE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'tehnic'::"text"));

CREATE POLICY "Allow delete" ON "public"."user_to_company" FOR DELETE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow delete" ON "public"."user_to_location" FOR DELETE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow delete" ON "public"."users" FOR DELETE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow insert" ON "public"."call_history" FOR INSERT TO "authenticated" WITH CHECK ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow insert" ON "public"."camera_models" FOR INSERT TO "authenticated" WITH CHECK ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow insert" ON "public"."camera_nvr_channels" FOR INSERT TO "authenticated" WITH CHECK ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow insert" ON "public"."camera_placement_images" FOR INSERT TO "authenticated" WITH CHECK ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow insert" ON "public"."camera_statistics" FOR INSERT TO "authenticated" WITH CHECK ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow insert" ON "public"."cameras" FOR INSERT TO "authenticated" WITH CHECK ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow insert" ON "public"."cameras_in_toml" FOR INSERT TO "anon" WITH CHECK (true);

CREATE POLICY "Allow insert" ON "public"."companies" FOR INSERT TO "authenticated" WITH CHECK ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow insert" ON "public"."company_types" FOR INSERT TO "authenticated" WITH CHECK ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow insert" ON "public"."custom_company_types" FOR INSERT TO "authenticated" WITH CHECK ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow insert" ON "public"."emails_alerted" FOR INSERT TO "authenticated" WITH CHECK ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow insert" ON "public"."location_activities" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Allow insert" ON "public"."location_intervention" FOR INSERT TO "authenticated" WITH CHECK ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow insert" ON "public"."location_reports" FOR INSERT TO "authenticated" WITH CHECK ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text"])));

CREATE POLICY "Allow insert" ON "public"."location_schedule" FOR INSERT TO "authenticated" WITH CHECK ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow insert" ON "public"."location_to_camera" FOR INSERT TO "authenticated" WITH CHECK ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow insert" ON "public"."locations" FOR INSERT TO "authenticated" WITH CHECK ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow insert" ON "public"."monitoring_call_order" FOR INSERT TO "authenticated" WITH CHECK ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow insert" ON "public"."motion_data_hourly" FOR INSERT TO "postgres" WITH CHECK (true);

CREATE POLICY "Allow insert" ON "public"."sim_cards" FOR INSERT TO "authenticated" WITH CHECK ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'tehnic'::"text"])));

CREATE POLICY "Allow insert" ON "public"."user_images" FOR INSERT TO "authenticated" WITH CHECK ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['tehnic'::"text", 'monitor'::"text", 'user'::"text"])));

CREATE POLICY "Allow insert" ON "public"."user_roles" FOR INSERT TO "authenticator" WITH CHECK (true);

CREATE POLICY "Allow insert" ON "public"."user_to_camera" FOR INSERT TO "authenticated" WITH CHECK ((("public"."req"() ->> 'user_role'::"text") = 'tehnic'::"text"));

CREATE POLICY "Allow insert" ON "public"."user_to_company" FOR INSERT TO "authenticated" WITH CHECK ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow insert" ON "public"."user_to_location" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Allow insert" ON "public"."users" FOR INSERT TO "authenticated" WITH CHECK (((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text") OR ("auth"."uid"() = "id")));

CREATE POLICY "Allow insert for anon key user" ON "public"."camera_script_start_times_manual" FOR INSERT TO "authenticated", "anon" WITH CHECK (true);

CREATE POLICY "Allow insert for anon key user" ON "public"."emails" FOR INSERT TO "anon" WITH CHECK (true);

CREATE POLICY "Allow insert for anon key user" ON "public"."monitoring_timetable" FOR INSERT TO "anon" WITH CHECK (true);

CREATE POLICY "Allow insert for anony" ON "public"."video_analysis" FOR INSERT TO "anon" WITH CHECK (true);

CREATE POLICY "Allow select" ON "public"."call_history" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."camera_checks" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."camera_models" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow select" ON "public"."camera_nvr_channels" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."camera_placement_images" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."camera_script_start_times_automated" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."camera_script_start_times_manual" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."camera_statistics" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."cameras" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."cameras_in_toml" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['user'::"text", 'admin'::"text"])));

CREATE POLICY "Allow select" ON "public"."companies" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."company_types" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."custom_company_types" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."email_attachments" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['tehnic'::"text", 'monitor'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."emails" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."emails_alerted" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."location_activities" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."location_code_share" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'user'::"text"));

CREATE POLICY "Allow select" ON "public"."location_intervention" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."location_reports" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."location_schedule" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."location_to_camera" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'tehnic'::"text", 'user'::"text", 'anonymous'::"text"])));

CREATE POLICY "Allow select" ON "public"."locations" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'tehnic'::"text", 'user'::"text", 'anonymous'::"text"])));

CREATE POLICY "Allow select" ON "public"."monitoring_call_order" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."monitoring_timetable" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['tehnic'::"text", 'monitoring'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."motion_data_hourly" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."roles" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['tehnic'::"text", 'monitor'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."sim_card_provider" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'tehnic'::"text", 'monitor'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."sim_cards" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'tehnic'::"text", 'monitor'::"text", 'user'::"text"])));

CREATE POLICY "Allow select" ON "public"."user_images" FOR SELECT TO "authenticated" USING (((("public"."req"() ->> 'user_role'::"text") = 'tehnic'::"text") OR ("auth"."uid"() = "user_id")));

CREATE POLICY "Allow select" ON "public"."user_roles" FOR SELECT TO "authenticated" USING (((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text") OR ("auth"."uid"() = "user_id")));

CREATE POLICY "Allow select" ON "public"."user_to_camera" FOR SELECT TO "authenticated" USING (((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['tehnic'::"text", 'monitor'::"text"])) OR ("auth"."uid"() = "user_id")));

CREATE POLICY "Allow select" ON "public"."user_to_company" FOR SELECT TO "authenticated" USING (((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text") OR ("auth"."uid"() = "user_id")));

CREATE POLICY "Allow select" ON "public"."user_to_location" FOR SELECT TO "authenticated" USING (((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'tehnic'::"text", 'user'::"text"])) OR ("auth"."uid"() = "user_id")));

CREATE POLICY "Allow select" ON "public"."users" FOR SELECT TO "authenticated" USING (((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text") OR ("auth"."uid"() = "id")));

CREATE POLICY "Allow select ANON" ON "public"."user_to_location" FOR SELECT TO "anon" USING (true);

CREATE POLICY "Allow select for anon" ON "public"."cameras" FOR SELECT TO "authenticated", "anon" USING (true);

CREATE POLICY "Allow select for anon" ON "public"."user_to_company" FOR SELECT TO "anon" USING (true);

CREATE POLICY "Allow select for anon" ON "public"."users" FOR SELECT TO "anon" USING (true);

CREATE POLICY "Allow select for anon key user" ON "public"."emails" FOR SELECT TO "authenticated", "anon" USING (true);

CREATE POLICY "Allow select for anon key user" ON "public"."monitoring_timetable" FOR SELECT TO "anon" USING (true);

CREATE POLICY "Allow select for anony" ON "public"."video_analysis" FOR SELECT TO "anon" USING (true);

CREATE POLICY "Allow update" ON "public"."camera_checks" FOR UPDATE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow update" ON "public"."camera_models" FOR UPDATE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow update" ON "public"."camera_nvr_channels" FOR UPDATE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow update" ON "public"."camera_placement_images" FOR UPDATE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow update" ON "public"."camera_script_start_times_automated" FOR UPDATE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow update" ON "public"."camera_script_start_times_manual" FOR UPDATE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow update" ON "public"."camera_statistics" FOR UPDATE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow update" ON "public"."cameras" FOR UPDATE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow update" ON "public"."cameras_in_toml" FOR UPDATE TO "anon" USING (true);

CREATE POLICY "Allow update" ON "public"."companies" FOR UPDATE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow update" ON "public"."emails" FOR UPDATE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow update" ON "public"."emails_alerted" FOR UPDATE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text"])));

CREATE POLICY "Allow update" ON "public"."location_activities" FOR UPDATE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'user'::"text", 'anonymous'::"text"])));

CREATE POLICY "Allow update" ON "public"."location_intervention" FOR UPDATE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow update" ON "public"."location_schedule" FOR UPDATE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow update" ON "public"."locations" FOR UPDATE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow update" ON "public"."monitoring_call_order" FOR UPDATE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow update" ON "public"."sim_cards" FOR UPDATE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'tehnic'::"text"])));

CREATE POLICY "Allow update" ON "public"."user_images" FOR UPDATE TO "authenticated" USING (((("public"."req"() ->> 'user_role'::"text") = 'tehnic'::"text") OR ("auth"."uid"() = "user_id")));

CREATE POLICY "Allow update" ON "public"."user_to_location" FOR UPDATE TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text"));

CREATE POLICY "Allow update" ON "public"."users" FOR UPDATE TO "authenticated" USING (((("public"."req"() ->> 'user_role'::"text") = 'admin'::"text") OR ("auth"."uid"() = "id")));

CREATE POLICY "Allow update for anon key user" ON "public"."camera_script_start_times_manual" FOR UPDATE TO "authenticated", "anon" USING (true);

CREATE POLICY "Allow update for anon key user" ON "public"."monitoring_timetable" FOR UPDATE TO "anon" USING (true);

CREATE POLICY "Allow update for anony" ON "public"."video_analysis" FOR UPDATE TO "authenticated", "anon", "admin" USING (true);

CREATE POLICY "Allow user register" ON "public"."users" FOR INSERT WITH CHECK (true);

CREATE POLICY "Enable insert for anon key user" ON "public"."camera_checks" FOR INSERT TO "anon" WITH CHECK (true);

CREATE POLICY "Enable insert for anon key user" ON "public"."camera_script_start_times_automated" FOR INSERT TO "anon" WITH CHECK (true);

CREATE POLICY "Enable insert for anon key user" ON "public"."email_attachments" FOR INSERT TO "anon" WITH CHECK (true);

CREATE POLICY "Enable select for anon key user" ON "public"."camera_checks" FOR SELECT TO "anon" USING (true);

CREATE POLICY "Enable select for anon key user" ON "public"."camera_script_start_times_automated" FOR SELECT TO "anon" USING (true);

CREATE POLICY "Enable select for anon key user" ON "public"."camera_script_start_times_manual" FOR SELECT TO "authenticated", "anon" USING (true);

CREATE POLICY "Enable select for anon key user" ON "public"."email_attachments" FOR SELECT TO "anon" USING (true);

CREATE POLICY "Enable update for anon key user" ON "public"."camera_checks" FOR UPDATE TO "anon" USING (true);

CREATE POLICY "Enable update for anon key user" ON "public"."camera_script_start_times_automated" FOR UPDATE TO "anon" USING (true);

CREATE POLICY "Enable update for users based on emailu" ON "public"."analysis" FOR UPDATE TO "authenticated", "anon" USING (true);

ALTER TABLE "public"."GDPR" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own role" ON "public"."user_roles" FOR SELECT USING (("user_id" = "auth"."uid"()));

CREATE POLICY "all permisions" ON "public"."location_code_share" USING (true);

CREATE POLICY "allow" ON "public"."video_analysis" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "allow all" ON "public"."camera_script_start_times_manual_client" TO "authenticated", "anon" USING (true);

CREATE POLICY "allow all" ON "public"."snooze_report" TO "authenticated" USING (true);

CREATE POLICY "allow all" ON "public"."snooze_report_img" TO "authenticated" USING (true);

CREATE POLICY "allow all" ON "public"."user_to_bucket_files" FOR SELECT TO "authenticated", "anon", "admin" USING (true);

CREATE POLICY "allow all auth" ON "public"."camera_checks" TO "authenticated" USING (true);

CREATE POLICY "allow all select" ON "public"."analysis" FOR SELECT TO "authenticated", "anon", "admin" USING (true);

CREATE POLICY "allow anon all" ON "public"."snooze_report" TO "anon" USING (true);

CREATE POLICY "allow anon select" ON "public"."snooze_report" FOR SELECT TO "anon" USING (true);

CREATE POLICY "allow delete" ON "public"."analysis" FOR DELETE TO "authenticated", "admin" USING (true);

CREATE POLICY "allow delete" ON "public"."user_to_bucket_files" FOR DELETE TO "authenticated", "anon", "admin" USING (true);

CREATE POLICY "allow insert" ON "public"."analysis" FOR INSERT TO "authenticated", "anon" WITH CHECK (true);

CREATE POLICY "allow insert" ON "public"."snooze_report_img" FOR INSERT TO "anon" WITH CHECK (true);

CREATE POLICY "allow insert" ON "public"."user_to_bucket_files" FOR INSERT TO "authenticated", "anon" WITH CHECK (true);

CREATE POLICY "allow select" ON "public"."GDPR" FOR SELECT TO "authenticated", "anon" USING (true);

CREATE POLICY "allow select" ON "public"."snooze_report" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'tehnic'::"text", 'monitor'::"text", 'user'::"text"])));

CREATE POLICY "allow select" ON "public"."snooze_report_img" FOR SELECT TO "authenticated" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'tehnic'::"text", 'monitor'::"text", 'user'::"text"])));

CREATE POLICY "allow select" ON "public"."user_to_bucket_files" FOR SELECT TO "authenticated", "anon", "admin" USING ((("public"."req"() ->> 'user_role'::"text") = ANY (ARRAY['admin'::"text", 'monitor'::"text"])));

CREATE POLICY "allow temporary all" ON "public"."snooze_report_img" TO "anon" USING (true);

CREATE POLICY "allow temporary select for anon" ON "public"."snooze_report_img" FOR SELECT TO "anon" USING (true);

ALTER TABLE "public"."analysis" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."call_history" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."camera_checks" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."camera_models" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."camera_nvr_channels" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."camera_placement_images" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."camera_script_start_times_automated" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."camera_script_start_times_manual" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."camera_script_start_times_manual_client" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."camera_statistics" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."cameras" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."cameras_in_toml" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."companies" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."company_types" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."custom_company_types" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."email_attachments" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."emails" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."emails_alerted" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."links" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."location_activities" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."location_code_share" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."location_intervention" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."location_reports" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."location_schedule" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."location_to_camera" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."locations" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."monitoring_call_order" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."monitoring_timetable" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."motion_data_hourly" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."roles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."sim_card_provider" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."sim_cards" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."snooze_report" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."snooze_report_img" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."temporary_location_access" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."test" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "test-policy" ON "public"."location_activities" FOR SELECT TO "authenticated", "anon" USING (true);

CREATE POLICY "test-select" ON "public"."test" FOR SELECT TO "authenticated", "anon" USING (true);

CREATE POLICY "test-select" ON "public"."test2" FOR SELECT TO "authenticated", "anon" USING (true);

ALTER TABLE "public"."test2" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "update" ON "public"."user_to_bucket_files" FOR UPDATE TO "authenticated", "anon", "admin" USING (true);

ALTER TABLE "public"."user_images" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_roles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_to_bucket_files" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_to_camera" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_to_company" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_to_location" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."video_analysis" ENABLE ROW LEVEL SECURITY;
SET SESSION AUTHORIZATION "postgres";
RESET SESSION AUTHORIZATION;
SET SESSION AUTHORIZATION "postgres";
RESET SESSION AUTHORIZATION;

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";
GRANT USAGE ON SCHEMA "public" TO "supabase_auth_admin";

GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE "public"."location_code_share" TO PUBLIC;
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" 
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" 
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" 
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" 

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" 
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" 
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" 
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" 

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" 
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" 
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" 
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" 

RESET ALL;
